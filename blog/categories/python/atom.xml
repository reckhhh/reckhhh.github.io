<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Black Mamba]]></title>
  <link href="http://reckhhh.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-05-01T03:35:00+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Notes III]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/30/python-notes-iii/"/>
    <updated>2015-04-30T01:04:15+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/30/python-notes-iii</id>
    <content type="html"><![CDATA[<h3>Sort in two ways</h3>

<ul>
<li><strong>sort()</strong>: In-place sorting, <em>replaces</em> the original data</li>
<li><strong>sorted()</strong>: Copied sorting, return a <em>sorted copy</em> of the original data</li>
<li>sorting order
<code>
sorted(data)    # Ascending
sorted(data, reverse=True)  # Descending
</code></li>
<li><p>Get top 3 data from file
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sanitize(time_string):
</span><span class='line'>  if &lsquo;-&rsquo; in time_string:
</span><span class='line'>      splitter = &lsquo;-&rsquo;
</span><span class='line'>  elif &lsquo;:&rsquo; in time_string:
</span><span class='line'>      splitter = &lsquo;:&rsquo;
</span><span class='line'>  else:
</span><span class='line'>      return (time_string)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  (mins, secs) = time_string.split(splitter)
</span><span class='line'>  return (mins + &lsquo;.&rsquo; + secs)&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def get_data(filename):
</span><span class='line'>    try:
</span><span class='line'>        with open(filename) as file:
</span><span class='line'>            data = file.readline()
</span><span class='line'>        return data.strip().split(&lsquo;,&rsquo;)
</span><span class='line'>    except IOError as ioerr:
</span><span class='line'>        print(&lsquo;File error: &rsquo; + str(ioerr))
</span><span class='line'>        return(None)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;file operation&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;james = get_data(&lsquo;james.txt&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clean_james = []
</span><span class='line'>for each_t in james:
</span><span class='line'>    clean_james.append(sanitize(each_t))&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;unique_james = []
</span><span class='line'>for each_t in clean_james:
</span><span class='line'>    if each_t not in unique_james:
</span><span class='line'>        unique_james.append(each_t)
</span><span class='line'>print(sorted(unique_james)[0:3])</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Remove the duplicates
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;file operation can be replaced with one line code&lt;/h1&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;print(sorted(set([sanitize(each_t) for each_t in get_date(&ldquo;james.txt&rdquo;)]))[0:3])</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p>Bundle the code and data in a dictionary
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def get_data(filename):
</span><span class='line'>  try:
</span><span class='line'>      with open(filename) as file:
</span><span class='line'>          data = file.readline()
</span><span class='line'>      temp = data.strip().split(&lsquo;,&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  # return a dictionary
</span><span class='line'>  return({'Name' : temp.pop(0),
</span><span class='line'>          'DOB'  : temp.pop(0),
</span><span class='line'>          'Times': str(sorted(set([sanitize(each_t) for each_t in temp]))[0:3])})
</span><span class='line'>  except IOError as ioerr:
</span><span class='line'>      print('File error: ' + str(ioerr))
</span><span class='line'>      return(None)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;sarah = get_data(&lsquo;sarah2.txt&rsquo;)
</span><span class='line'>print(sarah[&lsquo;Name&rsquo;] + &ldquo;&rsquo;s fastest times are: &rdquo; + sarah[&lsquo;Times&rsquo;])</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Amend the code and data in a class that inherit from BIF <strong>list</strong>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Athlete(list):
</span><span class='line'>  def &lt;strong&gt;init&lt;/strong&gt;(self, a_name, a_dob=None, a_times=[]):
</span><span class='line'>      list.&lt;strong&gt;init&lt;/strong&gt;([])
</span><span class='line'>      self.name = a_name
</span><span class='line'>      self.dob = a_dob
</span><span class='line'>      self.extend(a_times)&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def top3(self):
</span><span class='line'>    return(str(sorted(set([sanitize(each_t) for each_t in self]))[0:3]))&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def get_data(filename):
</span><span class='line'>    try:
</span><span class='line'>        &hellip;
</span><span class='line'>        return(Athlete(temp.pop(0), temp.pop(0), temp))
</span><span class='line'>    except IOError as ioerr:
</span><span class='line'>        &hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;sarah = get_data(&lsquo;sarah2.txt&rsquo;)
</span><span class='line'>print(sarah.name + &ldquo;&rsquo;s fastest times are: &rdquo; + sarah.top3())</span></code></pre></td></tr></table></div></figure></p>

<h3>Model the data</h3>

<ul>
<li>Put class AthleteList in a module file
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pickle
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;class AthleteList is saved in athletelist.py, import AthleteList using this line of code&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;use dir() command to confirm that the import has been successful&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;from athletelist import AthleteList&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def get_data(filename):
</span><span class='line'>    &hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def put_to_store(file_list):
</span><span class='line'>    all_athletes = {}
</span><span class='line'>    for each_file in file_list:
</span><span class='line'>        ath = get_data(each_file)
</span><span class='line'>        all_athletes[ath.name] = ath
</span><span class='line'>    try:
</span><span class='line'>        with open(&lsquo;athletes.pickle&rsquo;, &lsquo;wb&rsquo;) as athf:
</span><span class='line'>            pickle.dump(all_athletes, athf)
</span><span class='line'>    except IOError as ioerr:
</span><span class='line'>        print(&lsquo;File error (put_and_store): &rsquo; + str(ioerr))
</span><span class='line'>        return (all_athletes)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def get_from_store():
</span><span class='line'>    all_athletes = {}
</span><span class='line'>    try:
</span><span class='line'>        with open(&lsquo;athletes.pickle&rsquo;, &lsquo;rb&rsquo;) as athf:
</span><span class='line'>            all_athletes = pickle.load(athf)
</span><span class='line'>        except IOError as ioerr:
</span><span class='line'>            print(&lsquo;File error (get_from_store): &rsquo; + str(ioerr))
</span><span class='line'>            return (all_athletes)</span></code></pre></td></tr></table></div></figure></p>

<hr />

<h3>Bonus I: Factory Function: set()</h3>

<ul>
<li>Build an unordered collection of unique elements
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = [1,1,13,3,3,2,2,3,1,13,1]
</span><span class='line'>set(data)
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;output&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;{1, 2, 3, 13}</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h3>Bonus II: BIF: pop(i)</h3>

<ul>
<li>pop(i) call returns and removes data from the front of a list at location
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = [1,13,3,3,1]
</span><span class='line'>data.pop(3)
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;output&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3
</span><span class='line'>data
</span><span class='line'>[1,13,3,1]</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h3>Bonus III: List Comprehension</h3>

<ul>
<li>When the code is like this
<code>
new = []
for each_item in old:
  ...
append(len(each_item))
</code></li>
<li>Rewrite it like this
<code>
new = [len(each_item) for each_item in old]
</code></li>
</ul>


<h3>Bonus IV: Dictionary</h3>

<ul>
<li>Two way to create an empty dictionary
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;method 1&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>d1 = {}
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;method 2&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;d2 = dict()</span></code></pre></td></tr></table></div></figure></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes II]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/28/python-notes-ii/"/>
    <updated>2015-04-28T22:29:26+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/28/python-notes-ii</id>
    <content type="html"><![CDATA[<h3>Operation for text</h3>

<ul>
<li><p>Open and close a file
<code>
the_file = open('sketch.txt')
the_file.close()
</code></p></li>
<li><p>Get and change the current working directory
<code>
import os
os.getcwd()
os.chdir('.../targetDirectory')
os.listdir()
</code></p></li>
<li><p>Read line and back to the start location of the file
<code>
data = open('sketch.txt')
print(data.readline(), end='')
data.seek(0)    // “rewind” a file to the beginning
</code></p></li>
<li><p>Process every line of a file
<code>
for eachLine in data:
  print(eachLine, end='')
</code></p></li>
<li><p>Using <em>split()</em> method to process each line to <em>extract</em> part of the line
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import os&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if os.path.exists(&lsquo;sketch.txt&rsquo;):
</span><span class='line'>    data = open(&lsquo;sketch.txt&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for eachLine in data:
</span><span class='line'>    # only process the line that contains &lsquo;:&rsquo;
</span><span class='line'>    if not eachLine.find(&lsquo;:&rsquo;) == -1:
</span><span class='line'>        # optional arg is set to 1, line of data is only broken into 2 pieces
</span><span class='line'>        (role, line_spoken) = eachLine.split(&lsquo;:&rsquo;, 1)
</span><span class='line'>        line_spoken = line_spoken.strip()&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    print(role, end='')
</span><span class='line'>    print(' said: ', end='')
</span><span class='line'>    print(line_spoken, end='')
</span><span class='line'>
</span><span class='line'>data.close()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;else:
</span><span class='line'>    print(&lsquo;The data file is missing!&rsquo;)</span></code></pre></td></tr></table></div></figure></p>

<h3>Handle Exceptions: try/except Machanism</h3>

<ul>
<li><p>Python try to run code first, then deal with runtime errors (exceptions) as they happen
<code>
try:
  code (which might cause a runtime error)
except ErrorType:
  error-recovery code
</code></p></li>
<li><p>Python catch exceptions as they occur, gives you a chance to possibly recover from the error and, critically, not crash
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>  data = open(&lsquo;sketch.txt&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  for eachLine in data:
</span><span class='line'>  try:
</span><span class='line'>      (role, spoken) = eachLine.split(&lsquo;:&rsquo;, 1)
</span><span class='line'>      line_spoken = line_spoken.strip()&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  print(role, end='')
</span><span class='line'>  print(' said: ', end='')
</span><span class='line'>  print(spoken, end='')
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  # for handling the case there is no &lsquo;:&rsquo; in a line
</span><span class='line'>  except ValueError:
</span><span class='line'>      pass&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  data.close()
</span><span class='line'>except IOError:
</span><span class='line'>  print(&lsquo;The data file is missing!&rsquo;)&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>### Extend try/except with finally
</span><span class='line'>- No matter what errors occur, code in the **finally** suite is always run
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;man = []
</span><span class='line'>other = []&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    data = open(&lsquo;sketch.txt&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for eachLine in data:
</span><span class='line'>try:
</span><span class='line'>    (role, spoken) = eachLine.split(':', 1)
</span><span class='line'>    spoken = spoken.strip()
</span><span class='line'>
</span><span class='line'>    if role == 'Man':
</span><span class='line'>        man.append(spoken)
</span><span class='line'>    elif role == 'Other Man':
</span><span class='line'>        other.append(spoken)
</span><span class='line'>    except ValueError:
</span><span class='line'>        pass
</span><span class='line'>
</span><span class='line'>data.close()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;except IOError:
</span><span class='line'>    print(&lsquo;The data file is missing!&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    man_file = open(&lsquo;man_data.txt&rsquo;, &lsquo;w&rsquo;)
</span><span class='line'>    other_file = open(&lsquo;other_data.txt&rsquo;, &lsquo;w&rsquo;)
</span><span class='line'>    print(man, file=man_file)
</span><span class='line'>    print(other, file=other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print(&lsquo;File Error: &rsquo; + str(err))
</span><span class='line'>finally:
</span><span class='line'>    if &lsquo;man_file&rsquo; in locals():
</span><span class='line'>        man_file.close()
</span><span class='line'>    if &lsquo;other_file&rsquo; in locals():
</span><span class='line'>        other_file.close()</span></code></pre></td></tr></table></div></figure></p>

<h3>Knowing the detailed error imformation</h3>

<ul>
<li>Python creates an exception object that is passed as an argument to the except suite
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>  data = open(&lsquo;missingFile.txt&rsquo;)
</span><span class='line'>      print(data.readline(), file=data)
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;the error imformation is named as &lsquo;err&rsquo;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;except IOError as err:
</span><span class='line'>  print(&lsquo;File error: &rsquo; + str(err))
</span><span class='line'>finally:
</span><span class='line'>  if &lsquo;data&rsquo; in locals():
</span><span class='line'>      data.close()&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;output:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;File error: [Errno 2] No such file or directory: &lsquo;missingFile.txt&rsquo;</span></code></pre></td></tr></table></div></figure></p>

<h3>Use with to reduce the amount of code</h3>

<ul>
<li><p>The following code is identical to the former as a short version
<code>
try:
  with open('missingFile.txt', "w") as data:
      print(data.readline(), file=data)
except IOError as err:
  print('File error: ' + str(err))
</code></p></li>
<li><p>try/except/finally code can be rewrite using <strong>with</strong>
<code>
try:
  with open('man_data.txt', 'w') as man_file, open('other_data.txt', 'w') as other_file:
      print(man, file=man_file)
      print(other, file=other_file)
except IOError as err:
  print('File error: ' + str(err))
</code></p></li>
<li><p><strong>Note</strong>: no need to close file, because <strong>with</strong> does that job</p></li>
</ul>


<h3>Open the file in write mode</h3>

<ul>
<li>Assume there is a file named &ldquo;example.txt&rdquo; in the current directory
<code>
out = open("example.txt", "w")
print("Write something to example.txt", file=out)
out.close()
</code></li>
</ul>


<h3>Update nester.py for formating the output files</h3>

<ul>
<li>Add the 4th argument (<strong>fh=sys.out</strong>) be the output file
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;nester.py&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;import sys&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def print_item (the_list, indent=False, level=0, fh=sys.stdout):
</span><span class='line'>    for each_item in the_list:
</span><span class='line'>        if isinstance(each_item, list):
</span><span class='line'>            print_item (each_item, indent, level+1, fh)
</span><span class='line'>        else:
</span><span class='line'>            if indent:
</span><span class='line'>                for tab_stop in range(level):
</span><span class='line'>                    print(&ldquo;\t&rdquo;, end=&lsquo;@!&rsquo;, file=fh)
</span><span class='line'>            print (each_item, file=fh)</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Using func <strong>print_item</strong> for formating the output file
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import nester&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;man = []
</span><span class='line'>other = []&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    data = open(&lsquo;sketch.txt&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for eachLine in data:
</span><span class='line'>    try:
</span><span class='line'>        (role, line_spoken) = eachLine.split(&lsquo;:&rsquo;, 1)
</span><span class='line'>        line_spoken = line_spoken.strip()&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    if role == 'Man':
</span><span class='line'>        man.append(line_spoken)
</span><span class='line'>    elif role == 'Other Man':
</span><span class='line'>        other.append(line_spoken)
</span><span class='line'>except ValueError:
</span><span class='line'>    pass
</span><span class='line'>data.close()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;except IOError:
</span><span class='line'>    print(&lsquo;The data file is missing!&rsquo;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    with open(&lsquo;man_data.txt&rsquo;, &lsquo;w&rsquo;) as man_file, open(&lsquo;other_data.txt&rsquo;, &lsquo;w&rsquo;) as other_file:
</span><span class='line'>    # format the output files
</span><span class='line'>    nester.print_item(man, fh=man_file)
</span><span class='line'>    nester.print_item(other, fh=other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print(&lsquo;File error: &rsquo; + str(err))</span></code></pre></td></tr></table></div></figure></p>

<h3>Pickle the data</h3>

<ul>
<li>Store data using pickle.dump()
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pickle&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;man = []
</span><span class='line'>other = []&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    &hellip;
</span><span class='line'>except IOError:
</span><span class='line'>    &hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    # &lsquo;wb&rsquo; indicate the access mode to be &ldquo;writeable, binary&rdquo;
</span><span class='line'>    with open(&lsquo;man_data.txt&rsquo;, &lsquo;wb&rsquo;) as man_file, open(&lsquo;other_data.txt&rsquo;, &lsquo;wb&rsquo;) as other_file:
</span><span class='line'>    # store data
</span><span class='line'>        pickle.dump(man, man_file)
</span><span class='line'>        pickle.dump(other, other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print(&lsquo;File error: &rsquo; + str(err))&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;handle pickle exceptions&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;except pickle.PickleError as perr:
</span><span class='line'>    print(&lsquo;Pickling error: &rsquo; + str(perr))
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- Load data using pickle.load()
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>import pickle
</span><span class='line'>import nester&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;new_man = []&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    with open(&lsquo;man_data.txt&rsquo;, &lsquo;rb&rsquo;) as man_file:
</span><span class='line'>        new_man = pickle.load(man_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print(&lsquo;File error: &rsquo; + str(err))
</span><span class='line'>except pickle.PickleError as perr:
</span><span class='line'>    print(&lsquo;Pickle error: &rsquo; + str(perr))&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;nester.print_item(new_man)</span></code></pre></td></tr></table></div></figure></p>

<hr />

<h3>Bonus I: BIF split()</h3>

<ul>
<li>split(&hellip;)
<code>
str.split([sep[, maxsplit]]) -&gt; list of strings
</code></li>
<li>Return a list of the words in str, using <em>sep</em> as the delimiter string</li>
<li>If maxsplit is given, at most maxsplit splits are done</li>
<li>If <em>sep</em> is not specified or is None, any <strong>whitespace</strong> string is a separator and empty strings are removed from the results</li>
<li>If the <strong>optional argument</strong> is set to 1, line of data is only broken into 2 pieces, effectively negating the effect of any extra colon on any line</li>
</ul>


<h3>Bonus II: BIF strip()</h3>

<ul>
<li>strip(&hellip;)
<code>
str = "!!!!Today is a good day...Yeah.!!!!!!"
str.strip('!')
'Today is a good day...Yeah.'
</code></li>
<li>Returns a copy in which all chars have been stripped at the beginning and the end</li>
</ul>


<h3>Bonus III: BIFs Recall</h3>

<ul>
<li>open()</li>
<li>close()</li>
<li>readline()</li>
<li>seek()</li>
<li>split()</li>
<li>strip()</li>
<li>find()</li>
<li>help()</li>
<li>not</li>
<li>pass</li>
<li>pickle.dump()</li>
<li>pickle.load()</li>
<li>sys.out</li>
<li>try/except/finally</li>
<li>with &hellip; as</li>
<li>ValueError: Occurs when data doesn&rsquo;t conform to an expected format</li>
<li>IOError: Occurs when data can&rsquo;t be accessed properly</li>
</ul>


<h3>Bonus IV: Python Variable</h3>

<ul>
<li>Python variables don&rsquo;t actually contain the data assigned to them</li>
<li>Python variables contain a reference to a data object</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes I]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/27/python-notes-i/"/>
    <updated>2015-04-27T12:28:38+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/27/python-notes-i</id>
    <content type="html"><![CDATA[<h3>Work effectively with IDLE</h3>

<ul>
<li>Press <strong>TAB</strong> key, IDLE will offer suggestions to help you complete your statement</li>
<li>Press <strong>Alt-P</strong> to recall the previous code statement and press <strong>Alt-N</strong> to move to the next code statement</li>
</ul>


<h3>Deal with Python list</h3>

<ul>
<li>Python&rsquo;s variable identifiers don&rsquo;t have a type, Python&rsquo;s list is a <strong>high-level collection</strong></li>
<li>Using print() and len() to work out how many data items are in the list
<code>
animal  = ["Dog", 'Pig', 'Cat', "Duck"]
print(animal)
['Dog', 'Pig', 'Cat', 'Duck']
print(len(animal))
4
print(animal[1])
Pig
</code></li>
<li>Using append(), extend() and pop() method to add and remove data from the list
<code>
animal.append("Tiger")
print(animal)
['Dog', 'Pig', 'Cat', 'Duck', 'Tiger']
animal.pop()
'Tiger'
print(animal)
['Dog', 'Pig', 'Cat', 'Duck']
animal.extend(["Fish", "Bird"])
print(animal)
['Dog', 'Pig', 'Cat', 'Duck', 'Fish', 'Bird']
</code></li>
<li><p>Using remove() and insert() to find and remove or add a <strong>specific</strong> data from list
<code>
animal.remove("Pig")
print(animal)
['Dog', 'Cat', 'Duck', 'Fish', 'Bird']
animal.insert(1, "Bull")
print(animal)
['Dog', 'Bull', 'Cat', 'Duck', 'Fish', 'Bird']
</code></p></li>
<li><p>For loops work with lists of any size
<code>
animals = ["Dog", 'Pig', 'Cat', "Duck", "Fish"]
for each_animal in animals:
  print each_animal
</code></p></li>
<li><p>Store list within lists
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>movie = [&ldquo;Titanic&rdquo;, 1997, &ldquo;Romance &amp; Disaster&rdquo;, &ldquo;194 minutes&rdquo;, [&ldquo;James Cameron&rdquo;, [&ldquo;Leonardo DiCaprio&rdquo;, &ldquo;Kate Winslet&rdquo;, &ldquo;Billy Zane&rdquo;, &ldquo;Kathy Bates&rdquo;, &ldquo;Frances Fisher&rdquo;]]]
</span><span class='line'>for each_item in movie:
</span><span class='line'>  print each_item&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Titanic
</span><span class='line'>1997
</span><span class='line'>Romance &amp; Disaster
</span><span class='line'>194 minutes
</span><span class='line'>[&lsquo;James Cameron&rsquo;, [&lsquo;Leonardo DiCaprio&rsquo;, &lsquo;Kate Winslet&rsquo;, &lsquo;Billy Zane&rsquo;, &lsquo;Kathy Bates&rsquo;, &lsquo;Frances Fisher&rsquo;]]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;print movie[4][1][0]
</span><span class='line'>Leonardo DiCaprio</span></code></pre></td></tr></table></div></figure></p>

<h3>Don&rsquo;t repeat code and create a function</h3>

<ul>
<li>isinstance() BIF checks whether an identifier refers to a data object of some specified type</li>
<li>Using <strong>def</strong> to define a custom function
<code>
def function_name (arguments):
  code suite
</code></li>
<li>Python3 defaults its recursion limit to 1,000</li>
<li>Print items in list within lists
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_item(the_list):
</span><span class='line'>  for each_item in the_list:
</span><span class='line'>      if isinstance(each_item, list):
</span><span class='line'>          print_item(each_item)
</span><span class='line'>      else:
</span><span class='line'>          print(each_item)&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;print_item(movie)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Titanic
</span><span class='line'>1997
</span><span class='line'>Romance &amp; Disaster
</span><span class='line'>194 minutes
</span><span class='line'>James Cameron
</span><span class='line'>Leonardo DiCaprio
</span><span class='line'>Kate Winslet
</span><span class='line'>Billy Zane
</span><span class='line'>Kathy Bates
</span><span class='line'>Frances Fisher</span></code></pre></td></tr></table></div></figure></p>

<h3>Build a distribution and upload code to PyPI</h3>

<ul>
<li>Create a folder for the module</li>
<li>Create a file called &ldquo;setup.py&rdquo; in the new folder
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from distutils.core import setup&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;setup(
</span><span class='line'>    name = &lsquo;nester&rsquo;,
</span><span class='line'>    version = &lsquo;1.0&rsquo;,
</span><span class='line'>    py_modules = [&lsquo;nester&rsquo;],
</span><span class='line'>    author = &lsquo;name&rsquo;,
</span><span class='line'>    author_email = &lsquo;&lt;a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#110;&#97;&#109;&#x65;&#x40;&#x73;&#111;&#x6d;&#x65;&#x77;&#104;&#101;&#x72;&#101;&#x2e;&#x63;&#x6f;&#109;"&gt;&#x6e;&#x61;&#x6d;&#x65;&#64;&#115;&#111;&#x6d;&#101;&#119;&#104;&#x65;&#114;&#101;&#x2e;&#99;&#111;&#109;&lt;/a&gt;&rsquo;,
</span><span class='line'>    url = &lsquo;&lt;a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#110;&#97;&#x6d;&#101;&#x40;&#x73;&#x6f;&#x6d;&#x65;&#112;&#x6c;&#x61;&#99;&#101;&#x2e;&#99;&#x6f;&#109;"&gt;&#110;&#x61;&#x6d;&#101;&#x40;&#115;&#111;&#x6d;&#101;&#x70;&#x6c;&#97;&#99;&#x65;&#x2e;&#x63;&#x6f;&#109;&lt;/a&gt;&rsquo;,
</span><span class='line'>    description = &lsquo;A simple printer of nested lists&rsquo;,
</span><span class='line'>    )
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- Build a distribution file, enter the command at the prompt
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>python3 setup.py sdist
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- Install the distribution into local copy of Python
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>python3 setup.py install
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- Then, the module has been *transformed* into a distribution and *installed* into local copy of Python
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>// at the first time, should type the username and password
</span><span class='line'>python3 setup.py register</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Finally, upload code to PyPI
<code>
python3 setup.py sdist upload
</code></li>
</ul>


<h3>Import a module to use it</h3>

<ul>
<li>For instance, there is a function named &ldquo;nester.py&rdquo;
<code>
def print_item (the_list):
  # This function takes a argument called "the_list"
  for each_item in the_list:
      if isinstance(each_item, list):
          print_item (each_item)
      else:
          print (each_item)
</code></li>
<li>Type <strong>F5</strong> to run the module&rsquo;s code, use the following list data
<code>
// allow us to access nester's functions
import nester
animals = ['Pig', 'Dog', 'Cat', 'Bird', 'Fish']
// "nester" is associated namespace which like family names helps to qualify what the code mean
nester.print_item(animals)
</code></li>
</ul>


<h3>Use optional arguments</h3>

<ul>
<li>Update the function &ldquo;nester.py&rdquo; with default arguments
<code>
def print_item (the_list, indent=False, level=0):
  for each_item in the_list:
      if isinstance(each_item, list):
          print_item (each_item, indent, level+1)
      else:
          if indent:
              for tab_stop in range(level):
                  print("\t", end='@!')
          print (each_item)
</code></li>
<li>Use <strong>indent</strong> to control whether indent code</li>
<li>Use <strong>level</strong> to control the init indentation level</li>
</ul>


<h3>Update reversion to PyPI</h3>

<ul>
<li>Edit &ldquo;setup.py&rdquo; so that it has a new version
<code>
version = '1.1',
</code></li>
<li>Upload the new distribution to PyPI
<code>
python3 setup.py sdisk upload
</code></li>
</ul>


<hr />

<h3>Bonus I: Python BIFs</h3>

<ul>
<li>BIFs is short for <em>build-in functions</em>, it can mean less code to write</li>
<li>There were over 70 BIFs in Python3</li>
<li>BIFs have their very own namespace called <strong><em> builtins </em></strong></li>
<li>At Python or IDLE shell, typing dir(<strong><em> builtins </em></strong>) to see a list of the built-in functions</li>
<li>To find out what any BIF does—like input(), for example—type help(input) at the shell for a description of the BIFs function</li>
<li>Before write new code, think BIF at first</li>
</ul>


<h3>Bonus II: .pyc Files</h3>

<ul>
<li>If the module code hasn&rsquo;t changed, no translation occurs and the &ldquo;compiled&rdquo; code is executed</li>
<li>If the code has changed, the translation occurs (creating a new .pyc file) as needed</li>
<li>When Python sees a .pyc file, it tries to use it because doing so makes everything go much faster</li>
<li>The use of .pyc file (if found) is primarily a <strong>potential runtime optimization</strong> performed by the interpreter, it can&rsquo;t be created by users</li>
</ul>

]]></content>
  </entry>
  
</feed>
