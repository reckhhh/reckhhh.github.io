<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Black Mamba]]></title>
  <link href="http://reckhhh.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-06-22T23:45:55+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell Notes I]]></title>
    <link href="http://reckhhh.github.io/blog/2015/06/22/shell-notes-i/"/>
    <updated>2015-06-22T23:40:00+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/06/22/shell-notes-i</id>
    <content type="html"><![CDATA[<ul>
<li>替我们工作的是 &ldquo;硬件&rdquo;, 控制硬件的是 &ldquo;核心&rdquo;. 用户是通过 &ldquo;Shell&rdquo; 控制一些内核提供的 &ldquo;工具(Utility)&rdquo;, 来控制硬件工作</li>
<li>Shell(壳) 是连接人类和 kernel(核心, 使计算机主机工作) 的桥梁</li>
<li>命令别名设置功能</li>
<li>alias lm=&lsquo;ls -al&rsquo;, 将 lm 命令设置为 &lsquo;ls -al&rsquo;, 即显示目录中所有的内容</li>
<li>alias l=&lsquo;ls -F&rsquo;, 将 l 命令设置为 &lsquo;ls -F&rsquo;, 即以文件类型格式来显示目录中的内容</li>
<li><p>unalias lm, 取消 lm 命令的别名</p></li>
<li><p>type 命令查看命令类型</p></li>
<li><p>type ls</p>

<blockquote><p>查询 ls 是否为 shell 内置命令 ls is aliased to `ls &ndash;color=auto&#8217;</p></blockquote></li>
<li><p>type -a ls</p>

<blockquote><p>查询 ls 命令的最主要使用情况
ls is aliased to `ls &ndash;color=auto&#8217;
ls is /bin/ls</p></blockquote></li>
<li><p>type cd</p>

<blockquote><p>cd is a shell builtin</p></blockquote></li>
<li><p>变量设置中的单引号与双引号的不同, 双引号可以保持变量的内容, 单引号只能是一般字符</p></li>
<li><p>[root@linux ~]# name=&ldquo;$name&rdquo;</p></li>
<li><p>[root@linux ~]# echo $name
Ngcl</p></li>
<li><p>[root@linux ~]# name=&lsquo;$name&rsquo;</p></li>
<li><p>[root@linux ~]# echo $name</p></li>
</ul>


<p>$name</p>

<ul>
<li>在执行命令时, 引号 (`) 代表的含义</li>
<li>在一串命令中, ` 之内的命令先被执行, 而其执行出来的结果将作为外部输入信息</li>
<li>例如, locate 命令可列出所有相关文件的文件名, 如想知道每个文件的权限, 应先用 locate 将文件名数据列出来, 再用 ls 命令来处理</li>
<li><p>[root@linux ~]# ls -l `locate crontab`</p></li>
<li><p>变量键盘读取</p></li>
<li>read [-pt] variable</li>
<li>-p: 后接提示符</li>
<li>-t: 后接时间</li>
<li>例1:</li>
<li>[root@linux ~]# read atest
This is a test</li>
<li>[root@linux ~]# echo $atest
This is a test
$name</li>
<li>例2:</li>
<li>[root@linux ~]# read -p &ldquo;Please keyin your name: &rdquo; -t 30 named
Please keyin your name: Ngcl</li>
<li><p>[root@linux ~]# echo named
Ngcl</p></li>
<li><p>历史命令: history</p>

<ul>
<li>!66, 执行第 66 条命令</li>
<li>!!, 执行上一条命令</li>
<li>!al, 执行最近的以 al 开头的命令</li>
</ul>
</li>
<li><p>Shell 配置文件: ~/.bashrc</p>

<ul>
<li><h1>User specific aliases and functions</h1>

<p>添加用户自己设定的 alias 变量别名</p></li>
<li>使用 source 或小数点 (.), 将设置文件的内容读进当前的 shell 环境中</li>
<li>source ~/.bashrc</li>
<li>. ~/.bashrc</li>
</ul>
</li>
<li><p>数据流重导向</p>

<ul>
<li>输入 (stdin): 代码为 0, 使用 &lt; 或 &lt;&lt;</li>
<li>输出 (stdout): 代码为 1, 使用 > 或 >> 或 1></li>
<li>标准错误输出 (stderr): 代码为2, 使用 2> 或 2>></li>
<li>例如:</li>
<li>将当前目录下的文件信息全存储到 list.txt (覆盖写)
ls -al > list.txt</li>
<li>将根目录下的数据也存储到 list.txt (添加写)
ls -al / >> list.txt</li>
</ul>
</li>
<li><p>正则表达式</p>

<ul>
<li>grep &lsquo;root&rsquo; ~/list.txt
查找 list.txt 中有 &lsquo;root&rsquo; 的那一行</li>
<li>grep -v &lsquo;root&rsquo; ~/list.txt, (v: invert)
查找 list.txt 中没有 &lsquo;root&rsquo; 的那一行</li>
<li>grep -n &lsquo;a&rsquo; list.txt, (n: show line number)
查找 list.txt 中有 &lsquo;a&rsquo; 的行, 并显示行号</li>
</ul>
</li>
<li><p>Shell 脚本即剧本, 即用 shell 功能所编写的 &ldquo;程序(program)&rdquo;, 可以类比为 DOS 中的批处理文件 (.bat), 最简单的功能是将许多命令写在一起, 让用户很轻松地就能执行一次执行多个命令</p>

<ul>
<li><p>可以看为一种程序语言, 且这个程序语言用 shell 相关工具命令, 所以不需要编译即可执行, 还拥有不错的调试 (debug) 工具</p></li>
<li><p>Shell 版本 &ldquo;Hello World!&rdquo;</p></li>
</ul>
</li>
</ul>


<blockquote><p>#!/bin/bash
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
    export PATH
    echo -e &ldquo;Hello World ! \a \n&rdquo;
    read -p &ldquo;Enter first name and last name&rdquo; firstname lastname
    echo -e &ldquo;\nFull name: \$firstname \$lastname&rdquo;
    exit 0</p></blockquote>

<ul>
<li>解释:</li>
<li>第 1 行: #!/bin/bash 在声明这个脚本使用的 shell 名称和使用的 bash 的语法, 没有这一行, 该程序可能无法运行, 因为系统无法判断使用什么 shell 来执行</li>
<li><p>PATH 用来设置好环境变量, 可让程序直接进行并执行命令, 而不必写绝对路径</p></li>
<li><p>执行该脚本:</p>

<ul>
<li>sh hello.sh</li>
<li>chmod a+x hello.sh
./hello.sh</li>
</ul>
</li>
<li><p>read -p</p>

<ul>
<li>后根一个字符串 &ldquo;&rdquo;, 字符串 &ldquo;some string&rdquo; 后可以跟多个变量作输入</li>
</ul>
</li>
<li><p>echo -e</p>

<ul>
<li>参数前加 \$ 符号，\$firstname</li>
</ul>
</li>
<li><p>判断文件类型与属性</p>

<ul>
<li>test -f, filetype=&ldquo;regulare file&rdquo;</li>
<li>test -d, filetype=&ldquo;directory&rdquo;</li>
<li>test -r, permission=&ldquo;readable&rdquo;</li>
<li>test -w, permission=&ldquo;\permission writable&rdquo;</li>
<li>test -x, permission=&ldquo;\permission executable&rdquo;</li>
</ul>
</li>
<li><p>netstat -tuln 指令, 可查询到目前主机开启的网络服务端端口, 取得目前主机启动的服务</p>

<ul>
<li>常见的 port 与相关网络服务的关系:</li>
<li>80: www</li>
<li>22: ssh</li>
<li>21: ftp</li>
<li>25: mail</li>
</ul>
</li>
<li><p>testing=<code>netstat -tuln | grep ":80 "</code>
if [ &ldquo;$testing&rdquo; != &ldquo;&rdquo; ]; then
echo &ldquo;WWW is sunning&rdquo;
fi</p></li>
</ul>


<p>testing=<code>netstat -tuln | grep ":22 "</code>
if [ &ldquo;$testing&rdquo; != &ldquo;&rdquo; ]; then
echo &ldquo;SSH is sunning&rdquo;
fi</p>

<p>testing=<code>netstat -tuln | grep ":21 "</code>
if [ &ldquo;$testing&rdquo; != &ldquo;&rdquo; ]; then
echo &ldquo;FTP is sunning&rdquo;
fi</p>

<p>testing=<code>netstat -tuln | grep ":25 "</code>
if [ &ldquo;$testing&rdquo; != &ldquo;&rdquo; ]; then
echo &ldquo;Mail is sunning&rdquo;
fi</p>

<ul>
<li><p>if [ &ldquo;\$yn&rdquo; == &ldquo;Y&rdquo; ] || [ &ldquo;\$yn&rdquo; == &ldquo;y&rdquo; ]; then
echo &ldquo;OK, continue&rdquo;
elif [ &ldquo;\$yn&rdquo; == &ldquo;N&rdquo; ] || [ &ldquo;\$yn&rdquo; == &ldquo;n&rdquo; ]; then
echo &ldquo;Oh, interrupt!&rdquo;
else
echo &ldquo;I don&rsquo;t know what is your choise&rdquo;
fi</p></li>
<li><p>read -p &ldquo;Please input (Y/N): &rdquo; yn
[ &ldquo;\$yn&rdquo; == &ldquo;Y&rdquo; -o &ldquo;\$yn&rdquo; == &ldquo;y&rdquo; ] &amp;&amp; echo &ldquo;OK, continue&rdquo; &amp;&amp; exit 0
[ &ldquo;\$yn&rdquo; == &ldquo;N&rdquo; -o &ldquo;\$yn&rdquo; == &ldquo;n&rdquo; ] &amp;&amp; echo &ldquo;OK, interrupt!&rdquo; &amp;&amp; exit 0
echo &ldquo;I don&rsquo;t know what is your choise&rdquo; &amp;&amp; exit 0</p></li>
<li><p>if [ &ldquo;\$yn&rdquo; == &ldquo;Y&rdquo; ] || [ &ldquo;\$yn&rdquo; == &ldquo;y&rdquo; ]; then
echo &ldquo;OK, continue&rdquo;
exit 0
fi
if [ &ldquo;\$yn&rdquo; == &ldquo;N&rdquo; ] || [ &ldquo;\$yn&rdquo; == &ldquo;n&rdquo; ]; then
echo &ldquo;Oh, interrupt&rdquo;
exit 0
fi
echo &ldquo;I don&rsquo;t know what is your choise&rdquo; &amp;&amp; exit 0</p></li>
<li><p>if [ &ldquo;\$1&rdquo; == &ldquo;hello&rdquo; ]; then
echo &ldquo;Hello, how are you ?&rdquo;
elif [ &ldquo;\$1&rdquo; == &ldquo;&rdquo; ]; then
echo &ldquo;You MUST input parameters, ex> $0 someword&rdquo;
else
echo &ldquo;The only parameter is &lsquo;hello&rsquo;&rdquo;
fi</p></li>
<li><p>case \$1 in
&ldquo;hello&rdquo;)
echo &ldquo;Hello, how are you ?&rdquo;
;;
&ldquo;&rdquo;)
echo &ldquo;You MUST input params, ex> $0 someword&rdquo;
;;
*)
echo &ldquo;Usage \$0 {hello}&rdquo;
;;
esac</p></li>
<li><p>算术比较类:</p>

<ul>
<li>exp1 –eq exp2 相等, 为真</li>
<li>exp1 –ne exp2 不等，为真</li>
<li>exp1 –gt exp2 大于，为真</li>
<li>exp1 –ge exp2 大于或等于，为真</li>
<li>exp1 –lt exp2 小于，为真</li>
<li>exp1 –le exp2 小于或等于，为真</li>
<li>!exp 表达式为假，则结果为真</li>
</ul>
</li>
<li><p>until [ &ldquo;\$yn&rdquo; == &ldquo;yes&rdquo; ] || [ &ldquo;$yn&rdquo; == &ldquo;YES&rdquo; ]
do
read -p &ldquo;Input YES/yes to stop this program: &rdquo; yn
done</p></li>
<li><p>s=0
i=0</p></li>
</ul>


<p>while [ &ldquo;\$i&rdquo; != 100 ]
do
i=\$((\$i+1))
s=\$((\$s+\$i))
done
echo &ldquo;The res is ==> $s&rdquo;</p>

<p>s=0
for (( i=1; i&lt;=100; i=i+1 ))
do
s=\$((\$s+$i))
done
echo &ldquo;The result is ==> \$s&rdquo;</p>

<ul>
<li>for animal in dog cat elephant
do
echo &ldquo;There are &rdquo;&ldquo;$animal&rdquo;&ldquo;s&hellip;. &rdquo;
done</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Note III]]></title>
    <link href="http://reckhhh.github.io/blog/2015/06/18/linux-note-iii/"/>
    <updated>2015-06-18T23:10:58+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/06/18/linux-note-iii</id>
    <content type="html"><![CDATA[<ul>
<li><p>查询一个包是否被安装</p>

<ul>
<li>rpm -q | grep &lt; rpm package name></li>
</ul>
</li>
<li><p>列出所有被安装的 rpm package</p>

<ul>
<li>rpm -qa | grep <rpm package name></li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><p>隐藏/显示 隐藏文件: Ctrl + h</p>

<ul>
<li>硬盘数据分为两个区域</li>
<li>主引导分区 (MBR, Master Boot Recorder): 放置这个硬盘的信息区，只有 4 个分区记录，这些记录被称为主分区和扩展分区(Extended)。一个磁盘最多可有 4 个(主 + 扩展)分区。其中，扩展分区只能有一个</li>
<li>引导程序
  磁盘分区表，分区即修改磁盘 MBR 里的分区表</li>
</ul>
</li>
<li><p>数据放置区, 实际文件数据放置的地方</p>

<ul>
<li>如分区超过 4 个，一定要有扩展分区，且必须将所有剩下的空间分给扩展分区，然后再以逻辑分区来规划扩展分区的空间</li>
</ul>
</li>
<li><p>关机 shutdown</p>

<ul>
<li>shutdown -h now, 立刻关机</li>
<li>shutdown -h 20：30, 定时关机</li>
<li>shutdown -h +10, 10分钟后关机</li>
<li>shutdown -r now, 立刻重启</li>
<li>shutdown -r +30 ‘The system will reboot’, 再过30分钟系统会重新启动，并显示后面的信息</li>
</ul>
</li>
<li><p>Linux 文件属性</p>

<ul>
<li>－rwxrwx&mdash;, 一个文件有 10 个属性</li>
<li>第一个属性表示这个文件是&#8221;目录, 文件或连接文件等&#8221;:</li>
</ul>
</li>
<li>[d], 目录</li>
<li>[-], 文件</li>
<li>[l], 连接文件 (link file)</li>
<li>[d], 设备文件中可供存储的接口设备</li>
<li><p>[c], 设备文件中的串行端口设备</p>

<ul>
<li>例1, drwxr&ndash;r&ndash;, 这时非 root 账号不可以进入该目录, 因为 x 与目录的关系相关重要, 如果在该目录下不能执行命令的话, 那么自然也就无法进入了. 因此, 如对他人开放某个目录, 记得开放该目录的 x 属性</li>
<li>例2, -rw-r&ndash;r&ndash;  1 root   root

<ul>
<li>拥有者为 root, 用户组为 root,只有 root 才有访问权</li>
</ul>
</li>
<li>例3, -rwxr-xr&ndash;  1 test1  testgroup

<ul>
<li>拥有者为 test1, 用户组为 testgroup, test1 对此文件具有可读, 可写, 可执行的权力; 而同组其他用户可读, 可执行, 但不能写; 非 testgroup 用户组的人则仅可读, 不能写, 不能执行</li>
</ul>
</li>
<li>例4, -rwxr-xr&ndash;  1 test1  testgroup

<ul>
<li>拥有者 test1 可在本目录中进行任何操作, testgroup 用户组的账号可以进入本目录进行操作, 但不能在本目录下写入; 其他权限虽然有 r, 但由于没有 x 权限, 因此不能进入此目录, <strong>x 与能否进入该目录有关</strong></li>
</ul>
</li>
<li><strong>w 可以让用户删除, 更新, 新建文件或目录</strong>

<ul>
<li>更改文件权限, 当复制文件的时候使用</li>
<li>chgrp: 改变文件所属于用户组</li>
<li>chown: 改变文件所有者</li>
<li>chmod: 改变文件的属性, 可使用数字或符号</li>
<li>当以 vi 编辑 shell 的文字后, 属性通常是 -rw-rw-rw-, 也就是 666, 如要将它变成可执行文件, 并不能让其他人修改此文件, 那么就需要 -rwxr-xr-x 这个 755 的属性, 使用 chmod 755 filename 命令</li>
</ul>
</li>
</ul>
</li>
<li><p>套接字 (sockets)</p>

<ul>
<li>通常用在网络数据连接. 可以启动一个程序监听客户端的要求, 客户段就可以通过套接字来进行数据通信</li>
</ul>
</li>
<li><p>cd -, 返回前一个工作目录</p></li>
<li><p>cd ~account, 返回 account 用户的家目录</p></li>
<li><p>[root@linux tmp]# cp -i ~/.bashrc bashhh, 将家目录下的 .bashrc 复制到 /tmp下, 并重命名为 bashhh</p></li>
<li><p>修改文件时间与创建新文件 touch</p>

<ul>
<li>touch -t 0507150202 bashrc</li>
<li>将 bashrc 日期修改为 2005/07/15 2:02</li>
</ul>
</li>
<li><p>文件权限掩码 umask</p>

<ul>
<li>普通用户为 002, root 用户为 022</li>
<li>&ldquo;文件&rdquo; 默认 &ldquo;没有 x 权限&rdquo;, 只有 rw (666)
-rw-rw-rw-</li>
<li>&ldquo;目录&rdquo; 中的 x 与是否可进入此目录有关, 因此默认开放所有权限, 即 rwx (777)</li>
<li>-rw-rw-rw-</li>
<li>umask -S
u=rwx,g=rx,o=rx</li>
<li>例如, umask 为 022, 当用户建立文件和目录时:</li>
<li>建立文件: (-rw-rw-rw-) - (&mdash;&ndash;w&ndash;w-) = (-rw-r&ndash;r&ndash;)</li>
<li>建立目录: (drwxrwxrwx) - (&mdash;&ndash;w&ndash;w-) = (drwxr-xr-x)</li>
</ul>
</li>
<li><p>搜索文件</p>

<ul>
<li>例如: 查找 client.c</li>
<li>locate client.c</li>
</ul>
</li>
<li><p>磁盘与目录的可用容量</p>

<ul>
<li>df -h</li>
<li>df -h /etc</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Notes IV]]></title>
    <link href="http://reckhhh.github.io/blog/2015/06/17/linux-notes-iv/"/>
    <updated>2015-06-17T23:40:19+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/06/17/linux-notes-iv</id>
    <content type="html"><![CDATA[<h3>Linux 启动过程:</h3>

<ul>
<li>加载 BIOS 的硬件信息, 并获取第一个启动设备代号</li>
<li>读取第一个启动设备的 MBR 引导加载程序 (如 lilo, grub)</li>
<li>加载核心操作系统的核心信息, 核心开始解压缩, 并且尝试驱动所有硬件设备</li>
<li>核心执行 init 程序并获取运行信息</li>
<li>init 执行 /etc/rc.d/rc.sysinit 文件</li>
<li>启动核心的外挂模块 (/etc/modprobe.conf)</li>
<li>init 执行运行的各个批处理文件 (Scripts)</li>
<li>init 执行 /etc/rc.d/rc.local 文件</li>
<li>执行 /bin/login 程序, 等待用户登录</li>
<li>登录之后开始以 Shell 控制主机</li>
</ul>


<h3>引导加载程序 Grub:</h3>

<ul>
<li>引导加载程序是载入核心的工具</li>
<li>将引导加载程序分为两个阶段 (stage) 来执行

<ul>
<li>第一阶段为引导加载程序的主程序, 这个主程序必须要安装在启动区, 即 MBR 或超级块</li>
<li>第二阶段为载入引导加载程序的所有设置文件与相关的环境参数文件, 都在 /root 下面</li>
</ul>
</li>
<li>针对启动项目, 引导加载程序可以做到:

<ul>
<li>引导加载程序可以直接指定并取用核心文件, 加载到主存储器中</li>
<li>也可以将加载程序的控制权移交给下一个加载程序</li>
</ul>
</li>
<li>MBR 的 grub 可以做到:

<ul>
<li>直接指定核心 (boot/vmlinux) 来进行启动</li>
<li>将控制权交给 /dev/hda2 超级块中的 grub 进行管理</li>
</ul>
</li>
</ul>


<h3>Grub 的设置文件 /boot/grub/menu.1st 与安装类型:</h3>

<ul>
<li>Grub 启动时可自行编辑与修改启动设置项目, 类似 bash 的命令模式</li>
<li>可以动态搜索设置文件, 而不需要在修改设置文件后重新安装 grub, 即只要修改完 /boot/grub/menu.1st 里的设置, 下次启动就生效了</li>
<li>Grub 与硬盘的关系

<ul>
<li>grub 对硬盘的代号: (hd0, 0)</li>
<li>硬盘代号以小括号 () 括起来</li>
<li>硬盘以 hd 表示, 后面接一组数字</li>
<li>第一个搜索到的硬盘为 0 号, 第二个为 1 号,以此类推</li>
<li>第一个硬盘的第一个分区代号为 0, 以此类推</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Arm-linux-gcc on Linux]]></title>
    <link href="http://reckhhh.github.io/blog/2015/06/16/install-arm-linux-gcc-on-linux/"/>
    <updated>2015-06-16T23:39:55+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/06/16/install-arm-linux-gcc-on-linux</id>
    <content type="html"><![CDATA[<ul>
<li><p>下载 arm-linux-gcc-4.3.2.tg 包并解压到 /usr/local/ 目录下</p></li>
<li><p>配置 /etc/profile 全局环境变量, 在文件末尾加上:</p>

<ul>
<li><p>export PATH=$PATH:/usr/local/arm/4.3.2/bin</p></li>
<li><p>source /etc/profile</p></li>
</ul>
</li>
<li><p>配置成功后在命令行输入 arm-linux-gcc -v 命令查看版本信息</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Install Software and Its Solution]]></title>
    <link href="http://reckhhh.github.io/blog/2015/06/15/ubuntu-install-software-and-its-solution/"/>
    <updated>2015-06-15T23:43:55+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/06/15/ubuntu-install-software-and-its-solution</id>
    <content type="html"><![CDATA[<p>When install a software, sometimes the following error will occur:</p>

<ul>
<li>E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)</li>
<li>E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</li>
</ul>


<hr />

<p>This is the solution:</p>

<ul>
<li>sudo rm /var/cache/apt/archives/lock</li>
<li>sudo rm /var/lib/dpkg/lock</li>
</ul>

]]></content>
  </entry>
  
</feed>
