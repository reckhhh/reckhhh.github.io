<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Black Mamba]]></title>
  <link href="http://reckhhh.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-05-01T15:57:22+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Variable Property Attributes in iOS]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios/"/>
    <updated>2015-04-26T11:19:43+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios</id>
    <content type="html"><![CDATA[<p>In iOS, variable property attributes indicate data accessibility and storage considerations,</p>

<ul>
<li>atomic                //default</li>
<li>nonatomic</li>
<li>strong = retain       //default</li>
<li>weak = unsafe_unretained</li>
<li>retain</li>
<li>assign                //default</li>
<li>unsafe_unretained</li>
<li>copy</li>
<li>readonly</li>
<li>readwrite             //default</li>
</ul>


<hr />

<ul>
<li>atomic (default)

<ul>
<li>Only one thread access the variable (static type)</li>
<li>Thread safe, but slow</li>
</ul>
</li>
</ul>


<p>Example :
<code>
@property (atomic, retain) NSString *name;
@synthesize name;
</code></p>

<ul>
<li>nonatomic

<ul>
<li>Multiple threads access the variable (dynamic type)</li>
<li>Thread unsafe, but fast</li>
<li>Not a default behavior, need to add nonatomic keyword</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, retain) NSString *name;
@synthesize name;
</code></p>

<ul>
<li>strong (iOS4 = retain, default)

<ul>
<li>Own the object strongly, keep it in the heap until don&rsquo;t point to it anymore</li>
<li>Can&rsquo;t dealloc this before aim fine with that same as &ldquo;retain&rdquo;</li>
<li>Generally, using for UIViewControllers (UI item&rsquo;s parents)</li>
<li>Used with ARC and ARC automatically releases it when beyond its area or the strong reference is invalid</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, strong) ViewController *viewController;
@synthesize viewController;
</code></p>

<ul>
<li>weak (In iOS 4 &amp; OS X Snow Leopand = unsafe_unretained )

<ul>
<li>Keep it as long as someone else points to it strongly</li>
<li>A &ldquo;weak&rdquo; reference is a reference that you don&rsquo;t retain</li>
<li>Can&rsquo;t own the instance of object</li>
<li>When the object is &ldquo;deallocated&rdquo;, the weak pointer is automatically set to nil</li>
<li>Generally using for IBOutlets (UIViewController&rsquo;s Childs) because the child object only needs to exist as long as the parent object does</li>
</ul>
</li>
</ul>


<p>Example :
<code>
@property (nonatomic, weak) IBOutlet UIButton *myButton;
@synthesize myButton;
</code></p>

<ul>
<li>retain = strong

<ul>
<li>Old value is released and it is assigned</li>
<li>Specifies the new value should be sent &ldquo;-retain&rdquo; on assignment and the old value sent &ldquo;-release&rdquo;</li>
<li>If you write retain it will auto work like strong</li>
<li>Methods like &ldquo;alloc&rdquo; include an implicit &ldquo;retain&rdquo;</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, retain) NSString *name;
@synthesize name;
</code></p>

<ul>
<li>assign (default)

<ul>
<li>A property attribute tells the compiler how to synthesize the property&rsquo;s setter implementation</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, assign) NSString *address;
@synthesize address;
</code></p>

<ul>
<li>unsafe_unretained (In iOS 4 &amp; OS X Snow Leopand)

<ul>
<li>An ownership qualifier that tells ARC how to insert retain/release calls</li>
<li>The ARC version of assign</li>
<li>The old version of weak but not safe</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, unsafe_unretained) NSString *nickName;
@synthesize nickName;
</code></p>

<ul>
<li>copy

<ul>
<li>Required when the object is mutable</li>
<li>Specifies the new value should be sent &ldquo;-copy&rdquo; on assignment and the old value should be sent &ldquo;-release&rdquo;</li>
<li>Like retain, returns an object which you must explicitly release (e.g., in dealloc) in non-garbage collected environments</li>
<li>Need to release the object when finished with it because you are retaining the copy</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, copy) NSArray *myArray;
@synthesize myArray;
</code></p>

<ul>
<li>readonly

<ul>
<li>Tell compiler not to generate &ldquo;setter&rdquo; method automatically</li>
<li>If you specify readonly, only a &ldquo;getter&rdquo; method is required in the @implementation block</li>
<li>If you use the @synthesize directive in the @implementation block, only the &ldquo;getter&rdquo; method is synthesized</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, readonly) NSString *name;
@synthesize name;
</code></p>

<ul>
<li>readwrite  (default)

<ul>
<li>&ldquo;setter&rdquo; and &ldquo;getter&rdquo; are both generated</li>
<li>Both &ldquo;setter&rdquo; and &ldquo;getter&rdquo; method are required in the @implementation block</li>
<li>If you use the @synthesize directive in the implementation block, both the &ldquo;setter&rdquo; and &ldquo;getter&rdquo; methods are synthesized</li>
</ul>
</li>
</ul>


<p>Example:
<code>
@property (nonatomic, readwrite) NSString *name;
@synthesize name;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Count Style Memory Management of Apple]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-of-apple/"/>
    <updated>2015-04-25T23:32:02+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-of-apple</id>
    <content type="html"><![CDATA[<ul>
<li>A variable hold the objects generate by itself
<code>
id obj = [[NSObject alloc] init];
</code></li>
<li>A variable can hold the objects generate by other variables
<code>
id obj = [NSMutableArray array];
[obj retain];
</code></li>
<li>If the objects of a variable are no longer needed, the variable can release the objects held by itself
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Generate by itself and hold the objects by itself
</span><span class='line'>id obj = [[NSObject alloc] init];
</span><span class='line'>[obj release];&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// Generate by others and hold the objects by itself
</span><span class='line'>id obj = [NSMutableArray array];
</span><span class='line'>[obj retain];
</span><span class='line'>[obj release];
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- A variable cannot release the objects held by others
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>id obj1 = [obj0 object];
</span><span class='line'>[obj1 release];    // error</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
