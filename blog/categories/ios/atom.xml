<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Black Mamba]]></title>
  <link href="http://reckhhh.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-06-15T23:46:42+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Variable Property Attributes in iOS]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios/"/>
    <updated>2015-04-26T11:19:43+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios</id>
    <content type="html"><![CDATA[<p>In iOS, variable property attributes indicate data accessibility and storage considerations,</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="nf">atomic</span>                <span class="c1">//default</span>
</span><span class='line'><span class="p">-</span> <span class="nf">nonatomic</span>
</span><span class='line'><span class="p">-</span> <span class="nf">strong</span> <span class="o">=</span> <span class="k">retain</span>       <span class="c1">//default</span>
</span><span class='line'><span class="o">-</span> <span class="k">weak</span> <span class="o">=</span> <span class="k">unsafe_unretained</span>
</span><span class='line'><span class="o">-</span> <span class="k">retain</span>
</span><span class='line'><span class="o">-</span> <span class="k">assign</span>                <span class="c1">//default</span>
</span><span class='line'><span class="o">-</span> <span class="k">unsafe_unretained</span>
</span><span class='line'><span class="o">-</span> <span class="k">copy</span>
</span><span class='line'><span class="o">-</span> <span class="k">readonly</span>
</span><span class='line'><span class="o">-</span> <span class="k">readwrite</span>             <span class="c1">//default</span>
</span></code></pre></td></tr></table></div></figure></p>

<hr />

<ul>
<li>atomic (default)

<ul>
<li>Only one thread access the variable (static type)</li>
<li>Thread safe, but slow</li>
</ul>
</li>
</ul>


<p>Example :
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">atomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>nonatomic

<ul>
<li>Multiple threads access the variable (dynamic type)</li>
<li>Thread unsafe, but fast</li>
<li>Not a default behavior, need to add nonatomic keyword</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>strong (iOS4 = retain, default)

<ul>
<li>Own the object strongly, keep it in the heap until don&rsquo;t point to it anymore</li>
<li>Can&rsquo;t dealloc this before aim fine with that same as &ldquo;retain&rdquo;</li>
<li>Generally, using for UIViewControllers (UI item&rsquo;s parents)</li>
<li>Used with ARC and ARC automatically releases it when beyond its area or the strong reference is invalid</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">ViewController</span> <span class="o">*</span><span class="n">viewController</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">viewController</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>weak (In iOS 4 &amp; OS X Snow Leopand = unsafe_unretained )

<ul>
<li>Keep it as long as someone else points to it strongly</li>
<li>A &ldquo;weak&rdquo; reference is a reference that you don&rsquo;t retain</li>
<li>Can&rsquo;t own the instance of object</li>
<li>When the object is &ldquo;deallocated&rdquo;, the weak pointer is automatically set to nil</li>
<li>Generally using for IBOutlets (UIViewController&rsquo;s Childs) because the child object only needs to exist as long as the parent object does</li>
</ul>
</li>
</ul>


<p>Example :
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIButton</span> <span class="o">*</span><span class="n">myButton</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">myButton</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>retain = strong

<ul>
<li>Old value is released and it is assigned</li>
<li>Specifies the new value should be sent &ldquo;-retain&rdquo; on assignment and the old value sent &ldquo;-release&rdquo;</li>
<li>If you write retain it will auto work like strong</li>
<li>Methods like &ldquo;alloc&rdquo; include an implicit &ldquo;retain&rdquo;</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>assign (default)

<ul>
<li>A property attribute tells the compiler how to synthesize the property&rsquo;s setter implementation</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">address</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>unsafe_unretained (In iOS 4 &amp; OS X Snow Leopand)

<ul>
<li>An ownership qualifier that tells ARC how to insert retain/release calls</li>
<li>The ARC version of assign</li>
<li>The old version of weak but not safe</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">unsafe_unretained</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">nickName</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">nickName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>copy

<ul>
<li>Required when the object is mutable</li>
<li>Specifies the new value should be sent &ldquo;-copy&rdquo; on assignment and the old value should be sent &ldquo;-release&rdquo;</li>
<li>Like retain, returns an object which you must explicitly release (e.g., in dealloc) in non-garbage collected environments</li>
<li>Need to release the object when finished with it because you are retaining the copy</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">myArray</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">myArray</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>readonly

<ul>
<li>Tell compiler not to generate &ldquo;setter&rdquo; method automatically</li>
<li>If you specify readonly, only a &ldquo;getter&rdquo; method is required in the @implementation block</li>
<li>If you use the @synthesize directive in the @implementation block, only the &ldquo;getter&rdquo; method is synthesized</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>readwrite (default)

<ul>
<li>&ldquo;setter&rdquo; and &ldquo;getter&rdquo; are both generated</li>
<li>Both &ldquo;setter&rdquo; and &ldquo;getter&rdquo; method are required in the @implementation block</li>
<li>If you use the @synthesize directive in the implementation block, both the &ldquo;setter&rdquo; and &ldquo;getter&rdquo; methods are synthesized</li>
</ul>
</li>
</ul>


<p>Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readwrite</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Count Style Memory Management and ARC Rules]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-and-arc-rules/"/>
    <updated>2015-04-25T23:32:02+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-and-arc-rules</id>
    <content type="html"><![CDATA[<h3>Reference Count Style Memory Management</h3>

<ul>
<li><p>A variable hold the objects generate by itself
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>A variable can hold the objects generate by other variables
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">retain</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>If the objects of a variable are no longer needed, the variable can release the objects held by itself
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Generate by itself and hold the objects by itself</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">release</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Generate by others and hold the objects by itself</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">release</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>A variable cannot release the objects held by others
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj1</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj0</span> <span class="n">object</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj1</span> <span class="k">release</span><span class="p">];</span>    <span class="c1">// error</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>


<h3>ARC Rules</h3>

<ul>
<li><p>Can&rsquo;t use retain / release / retainCount / autorelease</p>

<ul>
<li>Memory management is the compiler&rsquo;s job, so there is no need to use this methods</li>
<li>This methods is need to use when the ARC is invalid</li>
</ul>
</li>
<li><p>Can&rsquo;t use NSAllocateObject / NSDeallocateObject</p>

<ul>
<li>When ARC is available, the methods NSAllocateObject and NSDeallocateObject are both forbidden</li>
</ul>
</li>
<li><p>Don&rsquo;t call dealloc explicitly</p>

<ul>
<li>When the object is abandoned, dealloc is called automatically no matter ARC is available or not</li>
</ul>
</li>
<li><p>Using @autoreleasepool instead of using NSAutoreleasePool</p></li>
<li><p>Object type variables can&rsquo;t be a member of structure</p>

<ul>
<li>Structure can&rsquo;t manage the life circle of its member</li>
</ul>
</li>
</ul>


<hr />

<h3>Bonus: The Diffence Between Objective-C Objects and Core Foundation Objects</h3>

<ul>
<li>Objective-C objects are generated by <strong>Foundation Framework</strong></li>
<li>Core foundation objects are generated by <strong>Core Foundation Framework</strong></li>
</ul>

]]></content>
  </entry>
  
</feed>
