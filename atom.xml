<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Black Mamba]]></title>
  <link href="http://reckhhh.github.io/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-05-02T02:49:27+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Notes V]]></title>
    <link href="http://reckhhh.github.io/blog/2015/05/02/python-notes-v/"/>
    <updated>2015-05-02T02:35:49+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/05/02/python-notes-v</id>
    <content type="html"><![CDATA[<h3>Python Version Binary Search</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">search2Binary</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">lower</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">upper</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">upper</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">upper</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lower</span> <span class="o">==</span> <span class="n">upper</span><span class="p">:</span>
</span><span class='line'>        <span class="k">assert</span><span class="p">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">seq</span><span class="p">[</span><span class="n">upper</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">upper</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">upper</span> <span class="o">+</span> <span class="n">lower</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="n">seq</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">search2Binary</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">upper</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">search2Binary</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Throwing Functions Around</h3>

<ul>
<li>map()
Applies the function to all the elements in the sequences</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span> <span class="c"># Equivalent to [str(i) for i in range(3)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;0&#39;</span><span class="p">,</span> <span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>filter()
Returns a list of those elements for which the function is true</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">isalnum</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;x41&quot;</span><span class="p">,</span> <span class="s">&quot;?!&quot;</span><span class="p">,</span> <span class="s">&quot;***&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nb">filter</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;x41&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># another way</span>
</span><span class='line'><span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">isalnum</span><span class="p">()]</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;x41&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lambda</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">isalnum</span><span class="p">(),</span> <span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;x41&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>reduce()
Equivalent to func(func(func(seq[0], seq[1]), seq[2]), &hellip;)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">75</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">100</span><span class="p">]</span>
</span><span class='line'><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="mi">288</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python STL</h3>

<ul>
<li>Set</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">set</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">|</span> <span class="n">b</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>
</span><span class='line'><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">issubset</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
</span><span class='line'><span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">symmetric_difference</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">^</span> <span class="n">b</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">a</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Heap</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">heapq</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">shuffle</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">shuffle</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span>
</span><span class='line'><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">heap</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="n">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">heap</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># heappush(heap, value), heappop(heap), heapify(heap)</span>
</span><span class='line'><span class="n">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">heap</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># heappop(heap)</span>
</span><span class='line'><span class="n">heappop</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="n">heappop</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="n">heap</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># heapify(heap)</span>
</span><span class='line'><span class="n">heap</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="n">heapify</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span>
</span><span class='line'><span class="n">heap</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># heapreplace()</span>
</span><span class='line'><span class="n">heapreplace</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">heap</span>
</span><span class='line'><span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">heapreplace</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'>
</span><span class='line'><span class="n">heap</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deque</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
</span><span class='line'>
</span><span class='line'><span class="c"># append(), appendleft()</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">deque</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span>
</span><span class='line'><span class="n">deque</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pop(), popleft()</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="n">q</span>
</span><span class='line'><span class="n">deque</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># rotate(), shift to right</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span>
</span><span class='line'><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span>
</span><span class='line'><span class="n">deque</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span>
</span><span class='line'><span class="n">deque</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>time</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">asctime</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;Fri May  2 13:32:20 2015&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>random</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># generate number from [0, n)</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'><span class="n">randrange</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>re</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="n">text</span><span class="o">=</span> <span class="s">&#39;alpha, beta,,,,gamma   delta&#39;</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;[, ]+&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;alpha&#39;</span><span class="p">,</span> <span class="s">&#39;beta&#39;</span><span class="p">,</span> <span class="s">&#39;gamma&#39;</span><span class="p">,</span> <span class="s">&#39;delta&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># maxsplit indicates the max number of splits allowed</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;[, ]+&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">maxsplit</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;alpha&#39;</span><span class="p">,</span> <span class="s">&#39;beta&#39;</span><span class="p">,</span> <span class="s">&#39;gamma   delta&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;[, ]+&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">maxsplit</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;alpha&#39;</span><span class="p">,</span> <span class="s">&#39;beta,,,,gamma   delta&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">pat</span> <span class="o">=</span> <span class="s">&#39;[a-zA-Z]+&#39;</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">&#39;&quot;Hm... Err -- are you sure?&quot; he said, sounding insecure.&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pat</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Hm&#39;</span><span class="p">,</span> <span class="s">&#39;Err&#39;</span><span class="p">,</span> <span class="s">&#39;are&#39;</span><span class="p">,</span> <span class="s">&#39;you&#39;</span><span class="p">,</span> <span class="s">&#39;sure&#39;</span><span class="p">,</span> <span class="s">&#39;he&#39;</span><span class="p">,</span> <span class="s">&#39;said&#39;</span><span class="p">,</span> <span class="s">&#39;sounding&#39;</span><span class="p">,</span> <span class="s">&#39;insecure&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">sng</span> <span class="o">=</span> <span class="s">r&#39;[.?\&quot;,]+&#39;</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">sng</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;...&#39;</span><span class="p">,</span> <span class="s">&#39;?&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sub(origin, &lsquo;text&rsquo;, substitute)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">origin</span> <span class="o">=</span> <span class="s">&#39; &#39;</span>
</span><span class='line'><span class="n">substi</span> <span class="o">=</span> <span class="s">&#39;Hello, &#39;</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="n">substi</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Hello,Peter&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>escape()</p>

<p>  Used to scape all the characters in a string that might be interpreted as a regular expression operator. If there is a long string with lots of special characters and escape() can help avoid typing a lot of backslashes.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="s">&#39;www.python.org&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;www</span><span class="se">\\</span><span class="s">.python</span><span class="se">\\</span><span class="s">.org&#39;</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="s">&#39;Today is a good day.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Today</span><span class="se">\\</span><span class="s"> is</span><span class="se">\\</span><span class="s"> a</span><span class="se">\\</span><span class="s"> good</span><span class="se">\\</span><span class="s"> day</span><span class="se">\\</span><span class="s">.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>match()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&#39;www\.(.*)\..{3}&#39;</span><span class="p">,</span> <span class="s">&#39;www.python.org&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;python&#39;</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">span</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;www.python.org&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python Database</h3>

<ul>
<li>Sqlite</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sqlite3</span>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;somedatabase.db&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get the cursor from the connection</span>
</span><span class='line'><span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tools for Testing</h3>

<ul>
<li>doctest</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># my_math.py</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mySquare</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">Square a number and returns the result.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">mySquare(2)</span>
</span><span class='line'><span class="sd">4</span>
</span><span class='line'><span class="sd">mySquare(3)</span>
</span><span class='line'><span class="sd">9</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add the lollowing code at the bottom</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">doctest</span><span class="o">,</span> <span class="nn">my_math</span>
</span><span class='line'>    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">(</span><span class="n">my_math</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, run the testmod and watch the script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">my_math</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">my_math</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Trying</span><span class="p">:</span>
</span><span class='line'>    <span class="n">mySquare</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">Expecting</span><span class="p">:</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="n">Trying</span><span class="p">:</span>
</span><span class='line'>    <span class="n">mySquare</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">Expecting</span><span class="p">:</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">1</span> <span class="n">items</span> <span class="n">had</span> <span class="n">no</span> <span class="n">tests</span><span class="p">:</span>
</span><span class='line'>    <span class="n">my_math</span>
</span><span class='line'><span class="mi">1</span> <span class="n">items</span> <span class="n">passed</span> <span class="nb">all</span> <span class="n">tests</span><span class="p">:</span>
</span><span class='line'>    <span class="mi">2</span> <span class="n">tests</span> <span class="ow">in</span> <span class="n">my_math</span><span class="o">.</span><span class="n">mySquare</span>
</span><span class='line'><span class="mi">2</span> <span class="n">tests</span> <span class="ow">in</span> <span class="mi">2</span> <span class="n">items</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">passed</span> <span class="ow">and</span> <span class="mi">0</span> <span class="n">failed</span><span class="o">.</span>
</span><span class='line'><span class="n">Test</span> <span class="n">passed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>unittest</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># my_math.py</span>
</span><span class='line'><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="c"># test_my_math.py</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">unittest</span><span class="o">,</span> <span class="nn">my_math</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ProductTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">testIntegers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">my_math</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">failUnless</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="s">&#39;Integer failed&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">testFloat</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">/</span><span class="mf">10.0</span>
</span><span class='line'>            <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">/</span><span class="mf">10.0</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">my_math</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">failUnless</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="s">&#39;Float failed&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add the lollowing code at the bottom</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span> <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, type F5 To run test_my_math.py</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">..</span>
</span><span class='line'><span class="o">---------------------------------------------------</span>
</span><span class='line'><span class="n">Ran</span> <span class="mi">2</span> <span class="n">tests</span> <span class="ow">in</span> <span class="mf">0.050</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="n">OK</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Error: Pygments Can't Parse Unknown Language: &lt;/p>]]></title>
    <link href="http://reckhhh.github.io/blog/2015/05/01/octopress-error-pygments-cant-parse-unknown-language/"/>
    <updated>2015-05-01T13:30:38+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/05/01/octopress-error-pygments-cant-parse-unknown-language</id>
    <content type="html"><![CDATA[<p>Octopress is good, but not perfect.</p>

<ul>
<li>One of the common error when type &ldquo;<strong>rake generate</strong>&rdquo; is:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: Pygments can't parse unknown language: &lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>Although there is a error, <em>jekyll</em> don&rsquo;t point out the detailed location where the error come from in its default setting. It was very annoying.</p>

<p>To deal with the error, one way is modify the Ruby file <strong>plugins/pygments_code.rb</strong>, add <strong>#{code}</strong> after <strong>#{lang}</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">rescue</span> <span class="no">MentosError</span>
</span><span class='line'><span class="k">raise</span> <span class="s2">&quot;Pygments can&#39;t parse unknown language: </span><span class="si">#{</span><span class="n">lang</span><span class="si">}#{</span><span class="n">code</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, when &ldquo;<strong>rake generate</strong>&rdquo; again, the error location will be listed.</p>

<ul>
<li>Another thing worth noted is that when blogging <strong>&lsquo;&rsquo; should be replaced with &lsquo; &rsquo;</strong>, i.e., add a blank between &lsquo;&rsquo;, otherwise, when <strong>rake generate</strong>, &lsquo;&rsquo; without blank between them will also produce this error and it is difficult to detect through error description</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes IV]]></title>
    <link href="http://reckhhh.github.io/blog/2015/05/01/python-notes-iv/"/>
    <updated>2015-05-01T04:04:53+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/05/01/python-notes-iv</id>
    <content type="html"><![CDATA[<h3>input() and raw_input()</h3>

<ul>
<li>input(): Gets inputs from the user</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">input</span><span class="p">(</span><span class="s">&quot;Enter a number: &quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">a</span> <span class="n">number</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>raw_input(): Gets input from the user, as a string</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Enter a number: &quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">a</span> <span class="n">number</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="s">&#39;3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>repr() and str()</h3>

<ul>
<li>repr(): Returns a string representation of a value</li>
<li>A synonym for repr(&lsquo;x&rsquo;) is &lsquo;x&rsquo;</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">repr</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Hello, world!&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="nb">repr</span><span class="p">(</span><span class="il">10000L</span><span class="p">)</span>
</span><span class='line'><span class="il">10000L</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>str(): Converts a value to a string</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
</span><span class='line'><span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="il">10000L</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Slicing</h3>

<ul>
<li>numbers[beg : end : direction(interval)]</li>
<li>range(beg&hellip;&lt;end), i.e., [beg, end)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">6</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">[::</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">10</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">5</span><span class="p">::</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[:</span><span class="mi">5</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="p">[</span><span class="mi">5</span><span class="p">::</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">numbers</span><span class="p">[:</span><span class="mi">5</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Membership</h3>

<ul>
<li>if &hellip; in &hellip;</li>
<li>if &hellip; not in &hellip;</li>
</ul>


<h3>Lists</h3>

<ul>
<li>To convert a list of characters such as the preceding code back to a string, use <strong>&lsquo; &rsquo;.join(somelist)</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">somelist</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">somelist</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;boy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deleting Elements use del</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Ada&#39;</span><span class="p">,</span> <span class="s">&#39;Bob&#39;</span><span class="p">,</span> <span class="s">&#39;Cecil&#39;</span><span class="p">,</span> <span class="s">&#39;David&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">del</span> <span class="n">names</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Ada&#39;</span><span class="p">,</span> <span class="s">&#39;Bob&#39;</span><span class="p">,</span> <span class="s">&#39;David&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Assigning to Slices</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">&#39;Perl&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">name</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">&#39;ython&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;P&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">,</span> <span class="s">&#39;h&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;n&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Slice assignments can be used to insert elements without replacing any of the original ones</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">nums</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">nums</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c"># del nums[1:4]</span>
</span><span class='line'><span class="n">nums</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>String Formatting</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;Hello, </span><span class="si">%s</span><span class="s">! </span><span class="si">%s</span><span class="s"> are you?&quot;</span>
</span><span class='line'><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="s">&#39;How&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="nb">str</span> <span class="o">%</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">Peter</span><span class="err">!</span> <span class="n">How</span> <span class="n">are</span> <span class="n">you</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for short</span>
</span><span class='line'><span class="s">&#39;</span><span class="si">%s</span><span class="s"> + </span><span class="si">%s</span><span class="s"> = </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1 + 1 = 2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Template Strings</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">Template</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">Template</span><span class="p">(</span><span class="s">&#39;$x,  glorious $x!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">&#39;slurm&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;slurm,  glorious slurm!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the replacement is part of a word</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">Template</span><span class="p">(</span><span class="s">&quot;It&#39;s ${x}tastic!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">&#39; slurm&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;It&#39;s  slurmtastic!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># insert a dollar sign, use $$</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">Template</span><span class="p">(</span><span class="s">&quot;Make $$ selling $x!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">&#39;slurm&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Make $ selling slurm!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># supply the value-name pairs in a dictionary</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">Template</span><span class="p">(</span><span class="s">&#39;A $thing must never $action.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;thing&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;dog&#39;</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;action&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;eat grass&#39;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;A dog must never eat grass.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>find()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;Monty Python&#39;s Flying Circus&quot;</span>
</span><span class='line'><span class="n">title</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;Python&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>split()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39;1+2+3+4+5&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">,</span> <span class="s">&#39;5&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;/usr/bin/env&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;usr&#39;</span><span class="p">,</span> <span class="s">&#39;bin&#39;</span><span class="p">,</span> <span class="s">&#39;env&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;a    aa    aaa    &#39;</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;aa&#39;</span><span class="p">,</span> <span class="s">&#39;aaa&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>join()
The inverse of split, used to join the elements of a sequence</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">,</span> <span class="s">&#39;5&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;+&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1+2+3+4+5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dirs</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;usr&#39;</span><span class="p">,</span> <span class="s">&#39;bin&#39;</span><span class="p">,</span> <span class="s">&#39;env&#39;</span>
</span><span class='line'><span class="n">dirs</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;usr&#39;</span><span class="p">,</span> <span class="s">&#39;bin&#39;</span><span class="p">,</span> <span class="s">&#39;env&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;/&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirs</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;/usr/bin/env&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;C:&#39;</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\\</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirs</span><span class="p">))</span>
</span><span class='line'><span class="n">C</span><span class="p">:</span>\<span class="n">usr</span>\<span class="nb">bin</span>\<span class="n">env</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>strip()
Get rid of the characters listed in strip()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39;!!!   a    aa    aaa    !!!!!&#39;</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;   a    aa    aaa    &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;   a    aa    aaa    &#39;</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;a    aa    aaa&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># list all that to remove</span>
</span><span class='line'><span class="s">&#39;*** SPAN * for * everyone!!! ***&#39;</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39; *!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;SPAN * for * everyone&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>title()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;that&#39;s all, folks&quot;</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;That&#39;S All, Folks&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>string.capwords()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">capwords</span><span class="p">(</span><span class="s">&quot;that&#39;s all, folks&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;That&#39;s All, Folks&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>replace()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39;This is a cat.&#39;</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;dog&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;This is a dog.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>maketrans() and translate()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">maketrans</span>
</span><span class='line'>
</span><span class='line'><span class="n">trantab</span> <span class="o">=</span> <span class="n">maketrans</span><span class="p">(</span><span class="s">&#39;aeiou&#39;</span><span class="p">,</span> <span class="s">&#39;12345&#39;</span><span class="p">)</span>  <span class="c"># (in -&gt; out)</span>
</span><span class='line'><span class="s">&quot;this is string example...wow!&quot;</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">trantab</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;th3s 3s 1 str3ng 2x1mpl2...w4w!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>An optional second argument can be supplied to specify that should be deleted</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39;this is an incredible test..&#39;</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">trantab</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;th3s 3s 1n 3ncr2d3bl2 t2st.&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&#39;this is an incredible test&#39;</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">trantab</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;th3s3s1n3ncr2d3bl2t2st&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dictionary</h3>

<ul>
<li>dict()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># (key, value)</span>
</span><span class='line'><span class="nb">dict</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">12</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>clear()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">x</span>   <span class="c"># refer to the same dictionary</span>
</span><span class='line'><span class="n">x</span><span class="p">[</span><span class="s">&#39;key&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;value&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">y</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;key&#39;</span><span class="p">:</span> <span class="s">&#39;value&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">y</span>   <span class="c"># y is also empty</span>
</span><span class='line'><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>copy()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="s">&#39;admin&#39;</span><span class="p">,</span> <span class="s">&#39;machines&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]}</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'><span class="n">y</span><span class="p">[</span><span class="s">&#39;username&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;peter&#39;</span>
</span><span class='line'><span class="n">y</span><span class="p">[</span><span class="s">&#39;machines&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">y</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="s">&#39;peter&#39;</span><span class="p">,</span> <span class="s">&#39;machines&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">]}</span>
</span><span class='line'><span class="n">x</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="s">&#39;admin&#39;</span><span class="p">,</span> <span class="s">&#39;machines&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>deepcopy()
Avoid the situation that <em>modify</em> the value.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;names&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Alfred&#39;</span><span class="p">,</span> <span class="s">&#39;Bertrand&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'><span class="n">deepc</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;names&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;Clive&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;names&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;Alfred&#39;</span><span class="p">,</span> <span class="s">&#39;Bertrand&#39;</span><span class="p">,</span> <span class="s">&#39;Clive&#39;</span><span class="p">]}</span>
</span><span class='line'><span class="n">c</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;names&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;Alfred&#39;</span><span class="p">,</span> <span class="s">&#39;Bertrand&#39;</span><span class="p">,</span> <span class="s">&#39;Clive&#39;</span><span class="p">]}</span>
</span><span class='line'><span class="n">deepc</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;names&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;Alfred&#39;</span><span class="p">,</span> <span class="s">&#39;Bertrand&#39;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>fromkeys
Create a new dictionary with the given keys.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{}</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">([</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">dict</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">([</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">dict</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">([</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">],</span> <span class="s">&#39;(default)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;(default)&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">:</span> <span class="s">&#39;(default)&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>get()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Peter&#39;</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;addr&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;England&#39;</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Peter&#39;</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;addr&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;England&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>has_key()
Check whether a dictionary has a given key.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Be gone after Python 3.0</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Peter&#39;</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>items()
Return all the items of dictionary as a list of the form (key, value)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">,</span> <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">,</span> <span class="s">&#39;spam&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;url&#39;</span><span class="p">,</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>iteritems()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Return</span> <span class="n">an</span> <span class="n">iterator</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">a</span> <span class="nb">list</span>
</span><span class='line'><span class="n">it</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">iteritems</span><span class="p">()</span>
</span><span class='line'><span class="n">it</span>
</span><span class='line'><span class="sb">`dictionary-itemiterator object at 0x10b918788`</span>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;url&#39;</span><span class="p">,</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>pop()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;spam&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">&#39;spam&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>popitem()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;url&#39;</span><span class="p">,</span> <span class="s">&#39;http:#www.python.org&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Python Web Site&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>setdefault()
Set the value corresponding to the given key if it not already in the dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;N/A&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;N/A&#39;</span>
</span><span class='line'><span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;N/A&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>update()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Peter&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;addr&#39;</span><span class="p">:</span> <span class="s">&#39;England&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;addr&#39;</span><span class="p">:</span> <span class="s">&#39;France&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Peter&#39;</span><span class="p">,</span> <span class="s">&#39;addr&#39;</span><span class="p">:</span> <span class="s">&#39;France&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>values</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>
</span><span class='line'><span class="n">dict_values</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>range(a, b), <strong>[a, b)</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">):</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Importing</h3>

<ul>
<li>import sth. from a module</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">somemodule</span> <span class="kn">import</span> <span class="n">somefunction</span>
</span><span class='line'><span class="ow">or</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">somemodule</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Define aliases</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span> <span class="k">as</span> <span class="n">foo</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="mf">2.0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>loop the key of a dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;x&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;z&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this one is better</span>
</span><span class='line'><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Slightly Loopy</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'><span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'><span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for short</span>
</span><span class='line'><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
</span><span class='line'><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Executing and Evaluating</h3>

<ul>
<li>exec</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">exec</span> <span class="s">&quot;print &#39;hello, world!&#39;&quot;</span>
</span><span class='line'><span class="n">hello</span><span class="p">,</span> <span class="n">world</span><span class="err">!</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>eval</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">d</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c"># exec &#39;x = 3&#39; in d</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s">&#39;x * x&#39;</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus: Trick of Reduce Code</h3>

<ul>
<li>Comparison</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># using the former instead of the latter</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">num</span> <span class="ow">and</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>or</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">&#39;Enter name: &#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="s">&#39;N/A&#39;</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span>
</span><span class='line'><span class="s">&#39;N/A&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>a if b else c</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">score</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">99</span><span class="p">)</span>
</span><span class='line'><span class="n">grade</span> <span class="o">=</span> <span class="s">&#39;A&#39;</span> <span class="k">if</span> <span class="mi">90</span> <span class="o">&lt;=</span> <span class="n">score</span> <span class="o">&lt;=</span> <span class="mi">100</span> <span class="k">else</span> <span class="s">&#39;B&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">grade</span>
</span><span class='line'><span class="s">&#39;A&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes III]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/30/python-notes-iii/"/>
    <updated>2015-04-30T01:04:15+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/30/python-notes-iii</id>
    <content type="html"><![CDATA[<h3>Sort in two ways</h3>

<ul>
<li><strong>sort()</strong>: In-place sorting, <em>replaces</em> the original data</li>
<li><strong>sorted()</strong>: Copied sorting, return a <em>sorted copy</em> of the original data</li>
<li>sorting order</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>    <span class="c"># Ascending</span>
</span><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c"># Descending</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Get top 3 data from file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sanitize</span><span class="p">(</span><span class="n">time_string</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;-&#39;</span> <span class="ow">in</span> <span class="n">time_string</span><span class="p">:</span>
</span><span class='line'>        <span class="n">splitter</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="s">&#39;:&#39;</span> <span class="ow">in</span> <span class="n">time_string</span><span class="p">:</span>
</span><span class='line'>        <span class="n">splitter</span> <span class="o">=</span> <span class="s">&#39;:&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">time_string</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="n">mins</span><span class="p">,</span> <span class="n">secs</span><span class="p">)</span> <span class="o">=</span> <span class="n">time_string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">splitter</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">mins</span> <span class="o">+</span> <span class="s">&#39;.&#39;</span> <span class="o">+</span> <span class="n">secs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">ioerr</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ioerr</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># file operation</span>
</span><span class='line'><span class="n">james</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="s">&#39;james.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">clean_james</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_t</span> <span class="ow">in</span> <span class="n">james</span><span class="p">:</span>
</span><span class='line'>    <span class="n">clean_james</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sanitize</span><span class="p">(</span><span class="n">each_t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">unique_james</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_t</span> <span class="ow">in</span> <span class="n">clean_james</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">each_t</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">unique_james</span><span class="p">:</span>
</span><span class='line'>        <span class="n">unique_james</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">each_t</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">unique_james</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Remove the duplicates</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># file operation can be replaced with one line code</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">([</span><span class="n">sanitize</span><span class="p">(</span><span class="n">each_t</span><span class="p">)</span> <span class="k">for</span> <span class="n">each_t</span> <span class="ow">in</span> <span class="n">get_date</span><span class="p">(</span><span class="s">&quot;james.txt&quot;</span><span class="p">)]))[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bundle the code and data in a dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># return a dictionary</span>
</span><span class='line'>        <span class="k">return</span><span class="p">({</span><span class="s">&#39;Name&#39;</span> <span class="p">:</span> <span class="n">temp</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&#39;DOB&#39;</span>  <span class="p">:</span> <span class="n">temp</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&#39;Times&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">([</span><span class="n">sanitize</span><span class="p">(</span><span class="n">each_t</span><span class="p">)</span> <span class="k">for</span> <span class="n">each_t</span> <span class="ow">in</span> <span class="n">temp</span><span class="p">]))[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">])})</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">ioerr</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ioerr</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sarah</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="s">&#39;sarah2.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">sarah</span><span class="p">[</span><span class="s">&#39;Name&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;&#39;s fastest times are: &quot;</span> <span class="o">+</span> <span class="n">sarah</span><span class="p">[</span><span class="s">&#39;Times&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Amend the code and data in a class that inherit from BIF <strong>list</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Athlete</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a_name</span><span class="p">,</span> <span class="n">a_dob</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">a_times</span><span class="o">=</span><span class="p">[]):</span>
</span><span class='line'>        <span class="nb">list</span><span class="o">.</span><span class="n">__init__</span><span class="p">([])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">a_name</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dob</span> <span class="o">=</span> <span class="n">a_dob</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">a_times</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">top3</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">([</span><span class="n">sanitize</span><span class="p">(</span><span class="n">each_t</span><span class="p">)</span> <span class="k">for</span> <span class="n">each_t</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">]))[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="k">return</span><span class="p">(</span><span class="n">Athlete</span><span class="p">(</span><span class="n">temp</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">temp</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">temp</span><span class="p">))</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">ioerr</span><span class="p">:</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">sarah</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="s">&#39;sarah2.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">sarah</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;&#39;s fastest times are: &quot;</span> <span class="o">+</span> <span class="n">sarah</span><span class="o">.</span><span class="n">top3</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Model the data</h3>

<ul>
<li>Put class AthleteList in a module file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'><span class="c"># class AthleteList is saved in athletelist.py, import AthleteList using this line of code</span>
</span><span class='line'><span class="c"># use dir() command to confirm that the import has been successful</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">athletelist</span> <span class="kn">import</span> <span class="n">AthleteList</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">put_to_store</span><span class="p">(</span><span class="n">file_list</span><span class="p">):</span>
</span><span class='line'>    <span class="n">all_athletes</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each_file</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ath</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="n">each_file</span><span class="p">)</span>
</span><span class='line'>        <span class="n">all_athletes</span><span class="p">[</span><span class="n">ath</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">ath</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;athletes.pickle&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">athf</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">all_athletes</span><span class="p">,</span> <span class="n">athf</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">ioerr</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error (put_and_store): &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ioerr</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">all_athletes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_from_store</span><span class="p">():</span>
</span><span class='line'>    <span class="n">all_athletes</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;athletes.pickle&#39;</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">athf</span><span class="p">:</span>
</span><span class='line'>            <span class="n">all_athletes</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">athf</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">ioerr</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error (get_from_store): &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ioerr</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="n">all_athletes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus I: Factory Function: set()</h3>

<ul>
<li>Build an unordered collection of unique elements</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="c"># output</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">13</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bonus II: BIF: pop(i)</h3>

<ul>
<li>pop(i) call returns and removes data from the front of a list at location</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c"># output</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">data</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bonus III: List Comprehension</h3>

<ul>
<li>When the code is like this</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">new</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">old</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">each_item</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Rewrite it like this</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">new</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">each_item</span><span class="p">)</span> <span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">old</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bonus IV: Dictionary</h3>

<ul>
<li>Two way to create an empty dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># method 1</span>
</span><span class='line'><span class="n">d1</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="c"># method 2</span>
</span><span class='line'><span class="n">d2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wither and Fall]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/29/wither-and-fall/"/>
    <updated>2015-04-29T01:13:50+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/29/wither-and-fall</id>
    <content type="html"><![CDATA[<p>It should be a splendid flowering season</p>

<p>But grass wither and the flowers fall</p>

<p>It was painful</p>

<p>No flowers nor fruits</p>

<p>Reluctant withered at this time</p>

<p>But falled just this time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes II]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/28/python-notes-ii/"/>
    <updated>2015-04-28T22:29:26+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/28/python-notes-ii</id>
    <content type="html"><![CDATA[<h3>Operation for text</h3>

<ul>
<li>Open and close a file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">the_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">the_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Get and change the current working directory</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">&#39;.../targetDirectory&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Read line and back to the start location of the file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">readline</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>    <span class="c"># “rewind” a file to the beginning</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Process every line of a file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">eachLine</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">eachLine</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using <em>split()</em> method to process each line to <em>extract</em> part of the line</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">eachLine</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># only process the line that contains &#39;:&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">eachLine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># optional arg is set to 1, line of data is only broken into 2 pieces</span>
</span><span class='line'>        <span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="n">line_spoken</span><span class="p">)</span> <span class="o">=</span> <span class="n">eachLine</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line_spoken</span> <span class="o">=</span> <span class="n">line_spoken</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39; said: &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">line_spoken</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;The data file is missing!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Handle Exceptions: try/except Machanism</h3>

<ul>
<li>Python try to run code first, then deal with runtime errors (exceptions) as they happen</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">code</span> <span class="p">(</span><span class="n">which</span> <span class="n">might</span> <span class="n">cause</span> <span class="n">a</span> <span class="n">runtime</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="n">ErrorType</span><span class="p">:</span>
</span><span class='line'>    <span class="n">error</span><span class="o">-</span><span class="n">recovery</span> <span class="n">code</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python catch exceptions as they occur, gives you a chance to possibly recover from the error and, critically, not crash</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">eachLine</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="n">spoken</span><span class="p">)</span> <span class="o">=</span> <span class="n">eachLine</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line_spoken</span> <span class="o">=</span> <span class="n">line_spoken</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39; said: &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">spoken</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># for handling the case there is no &#39;:&#39; in a line</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;The data file is missing!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Extend try/except with finally</h3>

<ul>
<li>No matter what errors occur, code in the <strong>finally</strong> suite is always run</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">man</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">other</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">eachLine</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="n">spoken</span><span class="p">)</span> <span class="o">=</span> <span class="n">eachLine</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spoken</span> <span class="o">=</span> <span class="n">spoken</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">role</span> <span class="o">==</span> <span class="s">&#39;Man&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">man</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">spoken</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">role</span> <span class="o">==</span> <span class="s">&#39;Other Man&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">other</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">spoken</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;The data file is missing!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">man_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;man_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">other_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;other_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">man</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">man_file</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">other_file</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File Error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;man_file&#39;</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>
</span><span class='line'>        <span class="n">man_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;other_file&#39;</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>
</span><span class='line'>        <span class="n">other_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Knowing the detailed error imformation</h3>

<ul>
<li>Python creates an exception object that is passed as an argument to the except suite</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;missingFile.txt&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">readline</span><span class="p">(),</span> <span class="nb">file</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="c"># the error imformation is named as &#39;err&#39;</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;data&#39;</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>
</span><span class='line'>        <span class="n">data</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># output:</span>
</span><span class='line'><span class="n">File</span> <span class="n">error</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">2</span><span class="p">]</span> <span class="n">No</span> <span class="n">such</span> <span class="nb">file</span> <span class="ow">or</span> <span class="n">directory</span><span class="p">:</span> <span class="s">&#39;missingFile.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use with to reduce the amount of code</h3>

<ul>
<li>The following code is identical to the former as a short version</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;missingFile.txt&#39;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">readline</span><span class="p">(),</span> <span class="nb">file</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>try/except/finally code can be rewrite using <strong>with</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;man_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">man_file</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;other_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">other_file</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">man</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">man_file</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">other_file</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Note</strong>: no need to close file, because <strong>with</strong> does that job</li>
</ul>


<h3>Open the file in write mode</h3>

<ul>
<li>Assume there is a file named &ldquo;example.txt&rdquo; in the current directory</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;example.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Write something to example.txt&quot;</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="n">out</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update nester.py for formating the output files</h3>

<ul>
<li>Add the 4th argument (<strong>fh=sys.out</strong>) be the output file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># nester.py</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">print_item</span> <span class="p">(</span><span class="n">the_list</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fh</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">the_list</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>            <span class="n">print_item</span> <span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="n">indent</span><span class="p">,</span> <span class="n">level</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">fh</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">indent</span><span class="p">:</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">tab_stop</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">level</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;@!&#39;</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">fh</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">fh</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using func <strong>print_item</strong> for formating the output file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">nester</span>
</span><span class='line'>
</span><span class='line'><span class="n">man</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">other</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sketch.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">eachLine</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="n">line_spoken</span><span class="p">)</span> <span class="o">=</span> <span class="n">eachLine</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line_spoken</span> <span class="o">=</span> <span class="n">line_spoken</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">role</span> <span class="o">==</span> <span class="s">&#39;Man&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">man</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line_spoken</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">role</span> <span class="o">==</span> <span class="s">&#39;Other Man&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">other</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line_spoken</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;The data file is missing!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;man_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">man_file</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;other_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">other_file</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># format the output files</span>
</span><span class='line'>    <span class="n">nester</span><span class="o">.</span><span class="n">print_item</span><span class="p">(</span><span class="n">man</span><span class="p">,</span> <span class="n">fh</span><span class="o">=</span><span class="n">man_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nester</span><span class="o">.</span><span class="n">print_item</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">fh</span><span class="o">=</span><span class="n">other_file</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pickle the data</h3>

<ul>
<li>Store data using pickle.dump()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'>
</span><span class='line'><span class="n">man</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">other</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># &#39;wb&#39; indicate the access mode to be &quot;writeable, binary&quot;</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;man_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">man_file</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;other_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">other_file</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># store data</span>
</span><span class='line'>        <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">man</span><span class="p">,</span> <span class="n">man_file</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">other_file</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span><span class='line'><span class="c"># handle pickle exceptions</span>
</span><span class='line'><span class="k">except</span> <span class="n">pickle</span><span class="o">.</span><span class="n">PickleError</span> <span class="k">as</span> <span class="n">perr</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Pickling error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">perr</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Load data using pickle.load()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">nester</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_man</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;man_data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">man_file</span><span class="p">:</span>
</span><span class='line'>        <span class="n">new_man</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">man_file</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;File error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</span><span class='line'><span class="k">except</span> <span class="n">pickle</span><span class="o">.</span><span class="n">PickleError</span> <span class="k">as</span> <span class="n">perr</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Pickle error: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">perr</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">nester</span><span class="o">.</span><span class="n">print_item</span><span class="p">(</span><span class="n">new_man</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus I: BIF split()</h3>

<ul>
<li>split(&hellip;)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">([</span><span class="n">sep</span><span class="p">[,</span> <span class="n">maxsplit</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">list</span> <span class="n">of</span> <span class="n">strings</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Return a list of the words in str, using <em>sep</em> as the delimiter string</li>
<li>If maxsplit is given, at most maxsplit splits are done</li>
<li>If <em>sep</em> is not specified or is None, any <strong>whitespace</strong> string is a separator and empty strings are removed from the results</li>
<li>If the <strong>optional argument</strong> is set to 1, line of data is only broken into 2 pieces, effectively negating the effect of any extra colon on any line</li>
</ul>


<h3>Bonus II: BIF strip()</h3>

<ul>
<li>strip(&hellip;)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;!!!!Today is a good day...Yeah.!!!!!!&quot;</span>
</span><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Today is a good day...Yeah.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Returns a copy in which all chars have been stripped at the beginning and the end</li>
</ul>


<h3>Bonus III: BIFs Recall</h3>

<ul>
<li>open()</li>
<li>close()</li>
<li>readline()</li>
<li>seek()</li>
<li>split()</li>
<li>strip()</li>
<li>find()</li>
<li>help()</li>
<li>not</li>
<li>pass</li>
<li>pickle.dump()</li>
<li>pickle.load()</li>
<li>sys.out</li>
<li>try/except/finally</li>
<li>with &hellip; as</li>
<li>ValueError: Occurs when data doesn&rsquo;t conform to an expected format</li>
<li>IOError: Occurs when data can&rsquo;t be accessed properly</li>
</ul>


<h3>Bonus IV: Python Variable</h3>

<ul>
<li>Python variables don&rsquo;t actually contain the data assigned to them</li>
<li>Python variables contain a reference to a data object</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes I]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/27/python-notes-i/"/>
    <updated>2015-04-27T12:28:38+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/27/python-notes-i</id>
    <content type="html"><![CDATA[<h3>Work effectively with IDLE</h3>

<ul>
<li>Press <strong>TAB</strong> key, IDLE will offer suggestions to help you complete your statement</li>
<li>Press <strong>Alt-P</strong> to recall the previous code statement and press <strong>Alt-N</strong> to move to the next code statement</li>
</ul>


<h3>Deal with Python list</h3>

<ul>
<li>Python&rsquo;s variable identifiers don&rsquo;t have a type, Python&rsquo;s list is a <strong>high-level collection</strong></li>
<li>Using print() and len() to work out how many data items are in the list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">animal</span>  <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Dog&quot;</span><span class="p">,</span> <span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&quot;Duck&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Duck&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">animal</span><span class="p">))</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">Pig</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using append(), extend() and pop() method to add and remove data from the list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;Tiger&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Duck&#39;</span><span class="p">,</span> <span class="s">&#39;Tiger&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="s">&#39;Tiger&#39;</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Duck&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="s">&quot;Fish&quot;</span><span class="p">,</span> <span class="s">&quot;Bird&quot;</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Duck&#39;</span><span class="p">,</span> <span class="s">&#39;Fish&#39;</span><span class="p">,</span> <span class="s">&#39;Bird&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using remove() and insert() to find and remove or add a <strong>specific</strong> data from list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&quot;Pig&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Duck&#39;</span><span class="p">,</span> <span class="s">&#39;Fish&#39;</span><span class="p">,</span> <span class="s">&#39;Bird&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Bull&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Bull&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Duck&#39;</span><span class="p">,</span> <span class="s">&#39;Fish&#39;</span><span class="p">,</span> <span class="s">&#39;Bird&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>For loops work with lists of any size</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Dog&quot;</span><span class="p">,</span> <span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&quot;Duck&quot;</span><span class="p">,</span> <span class="s">&quot;Fish&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_animal</span> <span class="ow">in</span> <span class="n">animals</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">each_animal</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Store list within lists</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">movie</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Titanic&quot;</span><span class="p">,</span> <span class="mi">1997</span><span class="p">,</span> <span class="s">&quot;Romance &amp; Disaster&quot;</span><span class="p">,</span> <span class="s">&quot;194 minutes&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;James Cameron&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;Leonardo DiCaprio&quot;</span><span class="p">,</span> <span class="s">&quot;Kate Winslet&quot;</span><span class="p">,</span> <span class="s">&quot;Billy Zane&quot;</span><span class="p">,</span> <span class="s">&quot;Kathy Bates&quot;</span><span class="p">,</span> <span class="s">&quot;Frances Fisher&quot;</span><span class="p">]]]</span>
</span><span class='line'><span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">movie</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">each_item</span>
</span><span class='line'>
</span><span class='line'><span class="n">Titanic</span>
</span><span class='line'><span class="mi">1997</span>
</span><span class='line'><span class="n">Romance</span> <span class="o">&amp;</span> <span class="n">Disaster</span>
</span><span class='line'><span class="mi">194</span> <span class="n">minutes</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;James Cameron&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;Leonardo DiCaprio&#39;</span><span class="p">,</span> <span class="s">&#39;Kate Winslet&#39;</span><span class="p">,</span> <span class="s">&#39;Billy Zane&#39;</span><span class="p">,</span> <span class="s">&#39;Kathy Bates&#39;</span><span class="p">,</span> <span class="s">&#39;Frances Fisher&#39;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">movie</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">Leonardo</span> <span class="n">DiCaprio</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Don&rsquo;t repeat code and create a function</h3>

<ul>
<li>isinstance() BIF checks whether an identifier refers to a data object of some specified type</li>
<li>Using <strong>def</strong> to define a custom function</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">function_name</span> <span class="p">(</span><span class="n">arguments</span><span class="p">):</span>
</span><span class='line'>    <span class="n">code</span> <span class="n">suite</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python3 defaults its recursion limit to 1,000</li>
<li>Print items in list within lists</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_item</span><span class="p">(</span><span class="n">the_list</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">the_list</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>            <span class="n">print_item</span><span class="p">(</span><span class="n">each_item</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">each_item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print_item</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Titanic</span>
</span><span class='line'><span class="mi">1997</span>
</span><span class='line'><span class="n">Romance</span> <span class="o">&amp;</span> <span class="n">Disaster</span>
</span><span class='line'><span class="mi">194</span> <span class="n">minutes</span>
</span><span class='line'><span class="n">James</span> <span class="n">Cameron</span>
</span><span class='line'><span class="n">Leonardo</span> <span class="n">DiCaprio</span>
</span><span class='line'><span class="n">Kate</span> <span class="n">Winslet</span>
</span><span class='line'><span class="n">Billy</span> <span class="n">Zane</span>
</span><span class='line'><span class="n">Kathy</span> <span class="n">Bates</span>
</span><span class='line'><span class="n">Frances</span> <span class="n">Fisher</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Build a distribution and upload code to PyPI</h3>

<ul>
<li>Create a folder for the module</li>
<li>Create a file called &ldquo;setup.py&rdquo; in the new folder</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span><span class="p">(</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;nester&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">version</span> <span class="o">=</span> <span class="s">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">py_modules</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;nester&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">author</span> <span class="o">=</span> <span class="s">&#39;name&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">author_email</span> <span class="o">=</span> <span class="s">&#39;name@somewhere.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;name@someplace.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="s">&#39;A simple printer of nested lists&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Build a distribution file, enter the command at the prompt</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python3</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">sdist</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the distribution into local copy of Python</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python3</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Then, the module has been <em>transformed</em> into a distribution and <em>installed</em> into local copy of Python</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># at the first time, should type the username and password</span>
</span><span class='line'><span class="n">python3</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">register</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Finally, upload code to PyPI</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python3</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">sdist</span> <span class="n">upload</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Import a module to use it</h3>

<ul>
<li>For instance, there is a function named &ldquo;nester.py&rdquo;</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_item</span> <span class="p">(</span><span class="n">the_list</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># This function takes a argument called &quot;the_list&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">the_list</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>            <span class="n">print_item</span> <span class="p">(</span><span class="n">each_item</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="p">(</span><span class="n">each_item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Type <strong>F5</strong> to run the module&rsquo;s code, use the following list data</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># allow us to access nester&#39;s functions</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">nester</span>
</span><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Pig&#39;</span><span class="p">,</span> <span class="s">&#39;Dog&#39;</span><span class="p">,</span> <span class="s">&#39;Cat&#39;</span><span class="p">,</span> <span class="s">&#39;Bird&#39;</span><span class="p">,</span> <span class="s">&#39;Fish&#39;</span><span class="p">]</span>
</span><span class='line'><span class="c"># &quot;nester&quot; is associated namespace which like family names helps to qualify what the code mean</span>
</span><span class='line'><span class="n">nester</span><span class="o">.</span><span class="n">print_item</span><span class="p">(</span><span class="n">animals</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use optional arguments</h3>

<ul>
<li>Update the function &ldquo;nester.py&rdquo; with default arguments</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_item</span> <span class="p">(</span><span class="n">the_list</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each_item</span> <span class="ow">in</span> <span class="n">the_list</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>            <span class="n">print_item</span> <span class="p">(</span><span class="n">each_item</span><span class="p">,</span> <span class="n">indent</span><span class="p">,</span> <span class="n">level</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">indent</span><span class="p">:</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">tab_stop</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">level</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;@!&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="p">(</span><span class="n">each_item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use <strong>indent</strong> to control whether indent code</li>
<li>Use <strong>level</strong> to control the init indentation level</li>
</ul>


<h3>Update reversion to PyPI</h3>

<ul>
<li>Edit &ldquo;setup.py&rdquo; so that it has a new version</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="s">&#39;1.1&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Upload the new distribution to PyPI</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python3</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">sdisk</span> <span class="n">upload</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus I: Python BIFs</h3>

<ul>
<li>BIFs is short for <em>build-in functions</em>, it can mean less code to write</li>
<li>There were over 70 BIFs in Python3</li>
<li>BIFs have their very own namespace called <strong><em> builtins </em></strong></li>
<li>At Python or IDLE shell, typing dir(<strong><em> builtins </em></strong>) to see a list of the built-in functions</li>
<li>To find out what any BIF does—like input(), for example—type help(input) at the shell for a description of the BIFs function</li>
<li>Before write new code, think BIF at first</li>
</ul>


<h3>Bonus II: .pyc Files</h3>

<ul>
<li>If the module code hasn&rsquo;t changed, no translation occurs and the &ldquo;compiled&rdquo; code is executed</li>
<li>If the code has changed, the translation occurs (creating a new .pyc file) as needed</li>
<li>When Python sees a .pyc file, it tries to use it because doing so makes everything go much faster</li>
<li>The use of .pyc file (if found) is primarily a <strong>potential runtime optimization</strong> performed by the interpreter, it can&rsquo;t be created by users</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Property Attributes in iOS]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios/"/>
    <updated>2015-04-26T11:19:43+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios</id>
    <content type="html"><![CDATA[<p>In iOS, variable property attributes indicate data accessibility and storage considerations,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="nf">atomic</span>              <span class="c1">//default</span>
</span><span class='line'><span class="p">-</span> <span class="nf">nonatomic</span>
</span><span class='line'><span class="p">-</span> <span class="nf">strong</span> <span class="o">=</span> <span class="k">retain</span>        <span class="c1">//default</span>
</span><span class='line'><span class="o">-</span> <span class="k">weak</span> <span class="o">=</span> <span class="k">unsafe_unretained</span>
</span><span class='line'><span class="o">-</span> <span class="k">retain</span>
</span><span class='line'><span class="o">-</span> <span class="k">assign</span>                <span class="c1">//default</span>
</span><span class='line'><span class="o">-</span> <span class="k">unsafe_unretained</span>
</span><span class='line'><span class="o">-</span> <span class="k">copy</span>
</span><span class='line'><span class="o">-</span> <span class="k">readonly</span>
</span><span class='line'><span class="o">-</span> <span class="k">readwrite</span>             <span class="c1">//default</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<ul>
<li>atomic (default)

<ul>
<li>Only one thread access the variable (static type)</li>
<li>Thread safe, but slow</li>
</ul>
</li>
</ul>


<p>Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">atomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>nonatomic

<ul>
<li>Multiple threads access the variable (dynamic type)</li>
<li>Thread unsafe, but fast</li>
<li>Not a default behavior, need to add nonatomic keyword</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>strong (iOS4 = retain, default)

<ul>
<li>Own the object strongly, keep it in the heap until don&rsquo;t point to it anymore</li>
<li>Can&rsquo;t dealloc this before aim fine with that same as &ldquo;retain&rdquo;</li>
<li>Generally, using for UIViewControllers (UI item&rsquo;s parents)</li>
<li>Used with ARC and ARC automatically releases it when beyond its area or the strong reference is invalid</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">ViewController</span> <span class="o">*</span><span class="n">viewController</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">viewController</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>weak (In iOS 4 &amp; OS X Snow Leopand = unsafe_unretained )

<ul>
<li>Keep it as long as someone else points to it strongly</li>
<li>A &ldquo;weak&rdquo; reference is a reference that you don&rsquo;t retain</li>
<li>Can&rsquo;t own the instance of object</li>
<li>When the object is &ldquo;deallocated&rdquo;, the weak pointer is automatically set to nil</li>
<li>Generally using for IBOutlets (UIViewController&rsquo;s Childs) because the child object only needs to exist as long as the parent object does</li>
</ul>
</li>
</ul>


<p>Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIButton</span> <span class="o">*</span><span class="n">myButton</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">myButton</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>retain = strong

<ul>
<li>Old value is released and it is assigned</li>
<li>Specifies the new value should be sent &ldquo;-retain&rdquo; on assignment and the old value sent &ldquo;-release&rdquo;</li>
<li>If you write retain it will auto work like strong</li>
<li>Methods like &ldquo;alloc&rdquo; include an implicit &ldquo;retain&rdquo;</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>assign (default)

<ul>
<li>A property attribute tells the compiler how to synthesize the property&rsquo;s setter implementation</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">address</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>unsafe_unretained (In iOS 4 &amp; OS X Snow Leopand)

<ul>
<li>An ownership qualifier that tells ARC how to insert retain/release calls</li>
<li>The ARC version of assign</li>
<li>The old version of weak but not safe</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">unsafe_unretained</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">nickName</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">nickName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>copy

<ul>
<li>Required when the object is mutable</li>
<li>Specifies the new value should be sent &ldquo;-copy&rdquo; on assignment and the old value should be sent &ldquo;-release&rdquo;</li>
<li>Like retain, returns an object which you must explicitly release (e.g., in dealloc) in non-garbage collected environments</li>
<li>Need to release the object when finished with it because you are retaining the copy</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">myArray</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">myArray</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>readonly

<ul>
<li>Tell compiler not to generate &ldquo;setter&rdquo; method automatically</li>
<li>If you specify readonly, only a &ldquo;getter&rdquo; method is required in the @implementation block</li>
<li>If you use the @synthesize directive in the @implementation block, only the &ldquo;getter&rdquo; method is synthesized</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>readwrite (default)

<ul>
<li>&ldquo;setter&rdquo; and &ldquo;getter&rdquo; are both generated</li>
<li>Both &ldquo;setter&rdquo; and &ldquo;getter&rdquo; method are required in the @implementation block</li>
<li>If you use the @synthesize directive in the implementation block, both the &ldquo;setter&rdquo; and &ldquo;getter&rdquo; methods are synthesized</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readwrite</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Count Style Memory Management and ARC Rules]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-and-arc-rules/"/>
    <updated>2015-04-25T23:32:02+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-and-arc-rules</id>
    <content type="html"><![CDATA[<h3>Reference Count Style Memory Management</h3>

<ul>
<li>A variable hold the objects generate by itself</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A variable can hold the objects generate by other variables</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">retain</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If the objects of a variable are no longer needed, the variable can release the objects held by itself</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Generate by itself and hold the objects by itself</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Generate by others and hold the objects by itself</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">release</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A variable cannot release the objects held by others</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj1</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj0</span> <span class="n">object</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj1</span> <span class="k">release</span><span class="p">];</span>    <span class="c1">// error</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ARC Rules</h3>

<ul>
<li><p>Can&rsquo;t use retain / release / retainCount / autorelease</p>

<ul>
<li>Memory management is the compiler&rsquo;s job, so there is no need to use this methods</li>
<li>This methods is need to use when the ARC is invalid</li>
</ul>
</li>
<li><p>Can&rsquo;t use NSAllocateObject / NSDeallocateObject</p>

<ul>
<li>When ARC is available, the methods NSAllocateObject and NSDeallocateObject are both forbidden</li>
</ul>
</li>
<li><p>Don&rsquo;t call dealloc explicitly</p>

<ul>
<li>When the object is abandoned, dealloc is called automatically no matter ARC is available or not</li>
</ul>
</li>
<li><p>Using @autoreleasepool instead of using NSAutoreleasePool</p></li>
<li><p>Object type variables can&rsquo;t be a member of structure</p>

<ul>
<li>Structure can&rsquo;t manage the life circle of its member</li>
</ul>
</li>
</ul>


<hr />

<h3>Bonus: The Diffence Between Objective-C Objects and Core Foundation Objects</h3>

<ul>
<li>Objective-C objects are generated by <strong>Foundation Framework</strong></li>
<li>Core foundation objects are generated by <strong>Core Foundation Framework</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add Stuff on GitHub via Command Line]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/24/how-to-add-stuff-on-github-via-command-line/"/>
    <updated>2015-04-24T00:31:36+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/24/how-to-add-stuff-on-github-via-command-line</id>
    <content type="html"><![CDATA[<ul>
<li>Register an &ldquo;username&rdquo; and login in GitHub</li>
<li>Click &ldquo;+&rdquo; sign at the upper right corner to create a new repository and give it a name</li>
<li>Open your repository and you can see the clone URL is located at the right side, for instance: <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>Copy the URL of your repository and clone it from remote to local by typing: git clone <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>See the current configured remote repository for your fork by typing: git remote -v</li>
<li>Add something to the local repository, such as a &ldquo;README.md&rdquo; file</li>
<li>Push the new added file &ldquo;README.md&rdquo; to the remote version on GitHub by typing:

<ul>
<li>git init</li>
<li>git add README.md</li>
<li>git commit -m &ldquo;your commit remark&rdquo;</li>
<li>git remote rm origin</li>
<li>git remote add origin <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>git push -u origin master</li>
</ul>
</li>
<li>Typing your username and password to submit the changes to your repository on GitHub</li>
<li>Now you can refresh the web page of your repository to see the &ldquo;README.md&rdquo; file that just added</li>
<li>For removing the file/document named &ldquo;sometingToRemove&rdquo; of your local repository:

<ul>
<li>git rm sometingToRemove</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/23/first-blog/"/>
    <updated>2015-04-23T23:38:25+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/23/first-blog</id>
    <content type="html"><![CDATA[<p>After several hours efforts, I have my Octopress blog in the end.</p>

<h4><em>Hello, World !</em></h4>

<p>Then, what to write ?</p>

<p>I intend to:</p>

<ul>
<li><p>Share technology about <em>Programming</em> and <em>Software Development</em></p></li>
<li><p>Share <em>Experiences</em>, <em>Lessons</em> and <em>Thoughts</em></p></li>
<li><p>Record <em>Life</em> and <em>Time</em></p></li>
<li><p>Write about <em>Other Interesting Stuff</em></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
