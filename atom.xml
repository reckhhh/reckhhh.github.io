<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Black Mamba]]></title>
  <link href="http://reckhhh.github.io/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-04-27T13:00:26+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Notes I]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/27/python-notes-i/"/>
    <updated>2015-04-27T12:28:38+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/27/python-notes-i</id>
    <content type="html"><![CDATA[<h3>Work effectively with IDLE</h3>

<ul>
<li>Press <strong>TAB</strong> key, IDLE will offer suggestions to help you complete your statement</li>
<li>Press <strong>Alt-P</strong> to recall the previous code statement and press <strong>Alt-N</strong> to move to the next code statement</li>
</ul>


<h3>Deal with Python list</h3>

<ul>
<li>Python&rsquo;s variable identifiers don&rsquo;t have a type, Python&rsquo;s list is a <strong>high-level collection</strong></li>
<li>Using print() and len() to work out how many data items are in the list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal  = ["Dog", 'Pig', 'Cat', "Duck"]
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck']
</span><span class='line'>print(len(cast))
</span><span class='line'>4
</span><span class='line'>print(animal[1])
</span><span class='line'>Pig</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using append(), extend() and pop() method to add and remove data from the list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal.append("Tiger")
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck', 'Tiger']
</span><span class='line'>animal.pop()
</span><span class='line'>'Tiger'
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck']
</span><span class='line'>animal.extend(["Fish", "Bird"])
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck', 'Fish', 'Bird']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using remove() and insert() to find and remove or add a <strong>specific</strong> data from list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal.remove("Pig")
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Cat', 'Duck', 'Fish', 'Bird']
</span><span class='line'>animal.insert(1, "Bull")
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Bull', 'Cat', 'Duck', 'Fish', 'Bird']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>For loops work with lists of any size</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animals = ["Dog", 'Pig', 'Cat', "Duck", "Fish"]
</span><span class='line'>for each_animal in animals:
</span><span class='line'>    print each_animal</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Store list within lists</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>movie = ["Titanic", 1997, "Romance & Disaster", "194 minutes", ["James Cameron", ["Leonardo DiCaprio", "Kate Winslet", "Billy Zane", "Kathy Bates", "Frances Fisher"]]]
</span><span class='line'>for each_item in movie:
</span><span class='line'>    print each_item
</span><span class='line'>
</span><span class='line'>Titanic
</span><span class='line'>1997
</span><span class='line'>Romance & Disaster
</span><span class='line'>194 minutes
</span><span class='line'>['James Cameron', ['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates', 'Frances Fisher']]
</span><span class='line'>
</span><span class='line'>print movie[4][1][0]
</span><span class='line'>Leonardo DiCaprio</span></code></pre></td></tr></table></div></figure>


<h3>Don&rsquo;t repeat code and create a function</h3>

<ul>
<li>isinstance() BIF checks whether an identifier refers to a data object of some specified type</li>
<li>Using <strong>def</strong> to define a custom function</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def function_name (arguments):
</span><span class='line'>    code suite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python3 defaults its recursion limit to 1,000</li>
<li>Print items in list within lists</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_item(the_list):
</span><span class='line'>    for each_item in the_list:
</span><span class='line'>        if isinstance(each_item, list): 
</span><span class='line'>            print_item(each_item)
</span><span class='line'>        else:
</span><span class='line'>            print(each_item)
</span><span class='line'>
</span><span class='line'>print_item(movie)
</span><span class='line'>
</span><span class='line'>Titanic
</span><span class='line'>1997
</span><span class='line'>Romance & Disaster
</span><span class='line'>194 minutes
</span><span class='line'>James Cameron
</span><span class='line'>Leonardo DiCaprio
</span><span class='line'>Kate Winslet
</span><span class='line'>Billy Zane
</span><span class='line'>Kathy Bates
</span><span class='line'>Frances Fisher</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus: Python BIFs</h3>

<ul>
<li>BIFs is short for <em>build-in functions</em>, it can mean less code to write</li>
<li>There were over 70 BIFs in Python3</li>
<li>At Python or IDLE shell, typing dir(<strong>builtins</strong>) to see a list of the built-in functions</li>
<li>To find out what any BIF does—like input(), for example—type help(input) at the shell for a description of the BIFs function</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Property Attributes in iOS]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios/"/>
    <updated>2015-04-26T11:19:43+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios</id>
    <content type="html"><![CDATA[<p>In iOS, variable property attributes indicate data accessibility and storage considerations,</p>

<ul>
<li>atomic                //default</li>
<li>nonatomic</li>
<li>strong = retain       //default</li>
<li>weak = unsafe_unretained</li>
<li>retain</li>
<li>assign                //default</li>
<li>unsafe_unretained</li>
<li>copy</li>
<li>readonly</li>
<li>readwrite             //default</li>
</ul>


<hr />

<ul>
<li>atomic (default)

<ul>
<li>Only one thread access the variable (static type)</li>
<li>Thread safe, but slow</li>
</ul>
</li>
</ul>


<p>Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (atomic, retain) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>nonatomic

<ul>
<li>Multiple threads access the variable (dynamic type)</li>
<li>Thread unsafe, but fast</li>
<li>Not a default behavior, need to add nonatomic keyword</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, retain) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>strong (iOS4 = retain, default)

<ul>
<li>Own the object, keep it in the heap until don&rsquo;t point to it anymore</li>
<li>Can&rsquo;t dealloc this before aim fine with that same as &ldquo;retain&rdquo;</li>
<li>Generally, using for UIViewControllers (UI item&rsquo;s parents)</li>
<li>Used with ARC and ARC automatically releases it when you are done with it</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, strong) ViewController *viewController;
</span><span class='line'>@synthesize viewController;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>weak (iOS4 = unsafe_unretained )

<ul>
<li>Keep it as long as someone else points to it strongly</li>
<li>A &ldquo;weak&rdquo; reference is a reference that you don&rsquo;t retain</li>
<li>When the object is &ldquo;deallocated&rdquo;, the weak pointer is automatically set to nil</li>
<li>Generally using for IBOutlets (UIViewController&rsquo;s Childs) because the child object only needs to exist as long as the parent object does</li>
</ul>
</li>
</ul>


<p>Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, weak) IBOutlet UIButton *myButton;
</span><span class='line'>@synthesize myButton;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>retain = strong

<ul>
<li>Old value is released and it is assigned</li>
<li>Specifies the new value should be sent &ldquo;-retain&rdquo; on assignment and the old value sent &ldquo;-release&rdquo;</li>
<li>If you write retain it will auto work like strong</li>
<li>Methods like &ldquo;alloc&rdquo; include an implicit &ldquo;retain&rdquo;</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, retain) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>assign (default)

<ul>
<li>A property attribute tells the compiler how to synthesize the property&rsquo;s setter implementation</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, assign) NSString *address;
</span><span class='line'>@synthesize address;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>unsafe_unretained

<ul>
<li>An ownership qualifier that tells ARC how to insert retain/release calls</li>
<li>The ARC version of assign</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, unsafe_unretained) NSString *nickName;
</span><span class='line'>@synthesize nickName;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>copy

<ul>
<li>Required when the object is mutable</li>
<li>Specifies the new value should be sent &ldquo;-copy&rdquo; on assignment and the old value should be sent &ldquo;-release&rdquo;</li>
<li>Like retain, returns an object which you must explicitly release (e.g., in dealloc) in non-garbage collected environments</li>
<li>Need to release the object when finished with it because you are retaining the copy</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, copy) NSArray *myArray;
</span><span class='line'>@synthesize myArray;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>readonly

<ul>
<li>Tell compiler not to generate &ldquo;setter&rdquo; method automatically</li>
<li>If you specify readonly, only a &ldquo;getter&rdquo; method is required in the @implementation block</li>
<li>If you use the @synthesize directive in the @implementation block, only the &ldquo;getter&rdquo; method is synthesized</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, readonly) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>readwrite  (default)

<ul>
<li>&ldquo;setter&rdquo; and &ldquo;getter&rdquo; are both generated</li>
<li>Both &ldquo;setter&rdquo; and &ldquo;getter&rdquo; method are required in the @implementation block</li>
<li>If you use the @synthesize directive in the implementation block, both the &ldquo;setter&rdquo; and &ldquo;getter&rdquo; methods are synthesized</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, readwrite) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Count Style Memory Management of Apple]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-of-apple/"/>
    <updated>2015-04-25T23:32:02+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-of-apple</id>
    <content type="html"><![CDATA[<ul>
<li>A variable hold the objects generate by itself</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id obj = [[NSObject alloc] init];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A variable can hold the objects generate by other variables</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id obj = [NSMutableArray array];
</span><span class='line'>[obj retain];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If the objects of a variable are no longer needed, the variable can release the objects held by itself</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Generate by itself and hold the objects by itself
</span><span class='line'>id obj = [[NSObject alloc] init];
</span><span class='line'>[obj release];
</span><span class='line'>
</span><span class='line'>// Generate by others and hold the objects by itself
</span><span class='line'>id obj = [NSMutableArray array];
</span><span class='line'>[obj retain];
</span><span class='line'>[obj release];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A variable cannot release the objects held by others</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id obj1 = [obj0 object];
</span><span class='line'>[obj1 release];    // error</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add Stuff on GitHub via Command Line]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/24/how-to-add-stuff-on-github-via-command-line/"/>
    <updated>2015-04-24T00:31:36+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/24/how-to-add-stuff-on-github-via-command-line</id>
    <content type="html"><![CDATA[<ul>
<li>Register an &ldquo;username&rdquo; and login in GitHub</li>
<li>Click &ldquo;+&rdquo; sign at the upper right corner to create a new repository and give it a name</li>
<li>Open your repository and you can see the clone URL is located at the right side, for instance: <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>Copy the URL of your repository and clone it from remote to local by typing: git clone <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>See the current configured remote repository for your fork by typing: git remote -v</li>
<li>Add something to the local repository, such as a &ldquo;README.md&rdquo; file</li>
<li>Push the new added file &ldquo;README.md&rdquo; to the remote version on GitHub by typing:

<ul>
<li>git init</li>
<li>git add README.md</li>
<li>git commit -m &ldquo;your commit remark&rdquo;</li>
<li>git remote rm origin</li>
<li>git remote add origin <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>git push -u origin master</li>
</ul>
</li>
<li>Typing your username and password to submit the changes to your repository on GitHub</li>
<li>Now you can refresh the web page of your repository to see the &ldquo;README.md&rdquo; file that just added</li>
<li>For removing the file/document named &ldquo;sometingToRemove&rdquo; of your local repository:

<ul>
<li>git rm sometingToRemove</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/23/first-blog/"/>
    <updated>2015-04-23T23:38:25+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/23/first-blog</id>
    <content type="html"><![CDATA[<p>After several hours efforts, I have my Octopress blog in the end.</p>

<h4><em>Hello, World !</em></h4>

<p>Then, what to write ?</p>

<p>I intend to:</p>

<ul>
<li><p>Share technology about <em>Programming</em> and <em>Software Development</em></p></li>
<li><p>Share <em>Experiences</em>, <em>Lessons</em> and <em>Thoughts</em></p></li>
<li><p>Record <em>Life</em> and <em>Time</em></p></li>
<li><p>Write about <em>Other Interesting Stuff</em></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
