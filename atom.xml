<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Black Mamba]]></title>
  <link href="http://reckhhh.github.io/atom.xml" rel="self"/>
  <link href="http://reckhhh.github.io/"/>
  <updated>2015-05-01T16:37:51+08:00</updated>
  <id>http://reckhhh.github.io/</id>
  <author>
    <name><![CDATA[Chen Rui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Error: Pygments Can't Parse Unknown Language: &lt;/p>]]></title>
    <link href="http://reckhhh.github.io/blog/2015/05/01/octopress-error-pygments-cant-parse-unknown-language/"/>
    <updated>2015-05-01T13:30:38+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/05/01/octopress-error-pygments-cant-parse-unknown-language</id>
    <content type="html"><![CDATA[<p>Octopress is good, but not perfect.</p>

<ul>
<li>One of the common error when type &ldquo;<strong>rake generate</strong>&rdquo; is:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: Pygments can't parse unknown language: &lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>Although there is a error, <em>jekyll</em> don&rsquo;t point out the detailed location where the error come from in its default setting. It was very annoying.</p>

<p>To deal with the error, one way is modify the Ruby file <strong>plugins/pygments_code.rb</strong>, add <strong>#{code}</strong> after <strong>#{lang}</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rescue MentosError
</span><span class='line'>raise "Pygments can't parse unknown language: #{lang}#{code}."
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then, when &ldquo;<strong>rake generate</strong>&rdquo; again, the error location will be listed.</p>

<ul>
<li>Another thing worth noted is that when blogging <strong>&lsquo;&rsquo; should be replaced with &lsquo; &rsquo;</strong>, i.e., add a blank between &lsquo;&rsquo;, otherwise, when <strong>rake generate</strong>, &lsquo;&rsquo; without blank between them will also produce this error and it is difficult to detect through error description</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes IV]]></title>
    <link href="http://reckhhh.github.io/blog/2015/05/01/python-notes-iv/"/>
    <updated>2015-05-01T04:04:53+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/05/01/python-notes-iv</id>
    <content type="html"><![CDATA[<h3>input() and raw_input()</h3>

<ul>
<li>input(): Gets inputs from the user</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input("Enter a number: ")
</span><span class='line'>Enter a number: 3
</span><span class='line'>3</span></code></pre></td></tr></table></div></figure>


<ul>
<li>raw_input(): Gets input from the user, as a string</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>raw_input("Enter a number: ")
</span><span class='line'>Enter a number: 3
</span><span class='line'>'3'</span></code></pre></td></tr></table></div></figure>


<h3>repr() and str()</h3>

<ul>
<li>repr(): Returns a string representation of a value</li>
<li>A synonym for repr(&lsquo;x&rsquo;) is &lsquo;x&rsquo;</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print repr("Hello, world!")
</span><span class='line'>'Hello, world!'
</span><span class='line'>print repr(10000L)
</span><span class='line'>10000L</span></code></pre></td></tr></table></div></figure>


<ul>
<li>str(): Converts a value to a string</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print str("Hello, world!")
</span><span class='line'>Hello, world!
</span><span class='line'>print str(10000L)
</span><span class='line'>10000</span></code></pre></td></tr></table></div></figure>


<h3>Slicing</h3>

<ul>
<li>numbers[beg : end : direction(interval)]</li>
<li>range(beg&hellip;&lt;end), i.e., [beg, end)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</span><span class='line'>
</span><span class='line'>numbers[3:6] = [4, 5, 6]
</span><span class='line'>numbers[-3:-1] = [8, 9]
</span><span class='line'>numbers[-3:] = [8, 9, 10]
</span><span class='line'>numbers[:3] = [1, 2, 3]
</span><span class='line'>
</span><span class='line'>numbers[0:10:2] = [1, 3, 5, 7, 9]
</span><span class='line'>numbers[3:6:2] = [4, 6]
</span><span class='line'>
</span><span class='line'>numbers[::3] = [1, 4, 7, 10]
</span><span class='line'>numbers[8:3] = []
</span><span class='line'>numbers[8:3:-1] = [9, 8, 7, 6, 5]
</span><span class='line'>
</span><span class='line'>numbers[10:0:-2] = [10, 8, 6, 4, 2]
</span><span class='line'>numbers[5::-2] = [6, 4, 2]
</span><span class='line'>numbers[:5:-2] = [10, 8]
</span><span class='line'>
</span><span class='line'>numbers[5::-2] = [6, 4, 2]
</span><span class='line'>numbers[:5:-1] = [10, 9, 8, 7]</span></code></pre></td></tr></table></div></figure>


<h3>Membership</h3>

<ul>
<li>if &hellip; in &hellip;</li>
<li>if &hellip; not in &hellip;</li>
</ul>


<h3>Lists</h3>

<ul>
<li>To convert a list of characters such as the preceding code back to a string, use <strong>&lsquo; &rsquo;.join(somelist)</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>somelist = ['b', 'o', 'y']
</span><span class='line'>' '.join(somelist)
</span><span class='line'>
</span><span class='line'>'boy'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deleting Elements use del</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>names = ['Ada', 'Bob', 'Cecil', 'David']
</span><span class='line'>del names[2]
</span><span class='line'>
</span><span class='line'>names
</span><span class='line'>['Ada', 'Bob', 'David']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Assigning to Slices</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name = list('Perl')
</span><span class='line'>name[1:] = list('ython')
</span><span class='line'>
</span><span class='line'>name
</span><span class='line'>['P', 'y', 't', 'h', 'o', 'n']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Slice assignments can be used to insert elements without replacing any of the original ones</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nums = [1, 5]
</span><span class='line'>nums[1:1] = [2, 3, 4]
</span><span class='line'>nums
</span><span class='line'>[1, 2, 3, 4, 5]
</span><span class='line'>
</span><span class='line'>nums[1:4] = []  // del nums[1:4]
</span><span class='line'>nums
</span><span class='line'>[1, 5]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>String Formatting</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str = "Hello, %s! %s are you?"
</span><span class='line'>val = ('Peter', 'How')
</span><span class='line'>print (str % val)
</span><span class='line'>
</span><span class='line'>Hello, Peter! How are you?
</span><span class='line'>
</span><span class='line'># for short
</span><span class='line'>'%s + %s = %s' % (1, 1, 2)
</span><span class='line'>'1 + 1 = 2'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Template Strings</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from string import Template
</span><span class='line'>
</span><span class='line'>s = Template('$x,  glorious $x!')
</span><span class='line'>s.substitute(x = 'slurm')
</span><span class='line'>'slurm,  glorious slurm!'
</span><span class='line'>
</span><span class='line'># the replacement is part of a word
</span><span class='line'>s = Template("It's ${x}tastic!")
</span><span class='line'>s.substitute(x = ' slurm')
</span><span class='line'>"It's  slurmtastic!"
</span><span class='line'>
</span><span class='line'># insert a dollar sign, use $$
</span><span class='line'>s = Template("Make $$ selling $x!")
</span><span class='line'>s.substitute(x='slurm')
</span><span class='line'>'Make $ selling slurm!'
</span><span class='line'>
</span><span class='line'># supply the value-name pairs in a dictionary
</span><span class='line'>s = Template('A $thing must never $action.')
</span><span class='line'>d = {}
</span><span class='line'>d['thing'] = 'dog'
</span><span class='line'>d['action'] = 'eat grass'
</span><span class='line'>s.substitute(d)
</span><span class='line'>'A dog must never eat grass.'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>find()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title = "Monty Python's Flying Circus"
</span><span class='line'>title.find('Python')
</span><span class='line'>6</span></code></pre></td></tr></table></div></figure>


<ul>
<li>split()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'1+2+3+4+5'.split('+')
</span><span class='line'>['1', '2', '3', '4', '5']
</span><span class='line'>
</span><span class='line'>'/usr/bin/env'.split('/')
</span><span class='line'>['', 'usr', 'bin', 'env']
</span><span class='line'>
</span><span class='line'>'a    aa    aaa    '.split()
</span><span class='line'>['a', 'aa', 'aaa']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>join()
The inverse of split, used to join the elements of a sequence</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>seq = ['1', '2', '3', '4', '5']
</span><span class='line'>'+'.join(seq)
</span><span class='line'>'1+2+3+4+5'
</span><span class='line'>
</span><span class='line'>dirs = '', 'usr', 'bin', 'env'
</span><span class='line'>dirs
</span><span class='line'>('', 'usr', 'bin', 'env')
</span><span class='line'>
</span><span class='line'>'/'.join(dirs)
</span><span class='line'>'/usr/bin/env'
</span><span class='line'>
</span><span class='line'>print('C:' + '\\'.join(dirs))
</span><span class='line'>C:\usr\bin\env</span></code></pre></td></tr></table></div></figure>


<ul>
<li>strip()
Get rid of the characters listed in strip()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'!!!   a    aa    aaa    !!!!!'.strip('!')
</span><span class='line'>'   a    aa    aaa    '
</span><span class='line'>
</span><span class='line'>'   a    aa    aaa    '.strip()
</span><span class='line'>'a    aa    aaa'
</span><span class='line'>
</span><span class='line'># list all that to remove
</span><span class='line'>'*** SPAN * for * everyone!!! ***'.strip(' *!')
</span><span class='line'>'SPAN * for * everyone'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>title()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"that's all, folks".title()
</span><span class='line'>"That'S All, Folks"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>string.capwords()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import string
</span><span class='line'>string.capwords("that's all, folks")
</span><span class='line'>"That's All, Folks"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>replace()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'This is a cat.'.replace('cat', 'dog')
</span><span class='line'>'This is a dog.'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>maketrans() and translate()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from string import maketrans
</span><span class='line'>
</span><span class='line'>trantab = maketrans('aeiou', '12345')  # (in -&gt; out)
</span><span class='line'>"this is string example...wow!".translate(trantab);
</span><span class='line'>
</span><span class='line'>'th3s 3s 1 str3ng 2x1mpl2...w4w!'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>An optional second argument can be supplied to specify that should be deleted</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'this is an incredible test..'.translate(trantab)
</span><span class='line'>'th3s 3s 1n 3ncr2d3bl2 t2st.'
</span><span class='line'>
</span><span class='line'>'this is an incredible test'.translate(trantab, ' ')
</span><span class='line'>'th3s3s1n3ncr2d3bl2t2st'</span></code></pre></td></tr></table></div></figure>


<h3>Dictionary</h3>

<ul>
<li>dict()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># (key, value)
</span><span class='line'>dict(name = 'Peter', age = 12)
</span><span class='line'>{'name': 'Peter', 'age': 12}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>clear()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = {}
</span><span class='line'>y = x   # refer to the same dictionary
</span><span class='line'>x['key'] = 'value'
</span><span class='line'>
</span><span class='line'>y
</span><span class='line'>{'key': 'value'}
</span><span class='line'>
</span><span class='line'>x.clear()
</span><span class='line'>
</span><span class='line'>y   # y is also empty
</span><span class='line'>{}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>copy()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = {'username': 'admin', 'machines': ['foo', 'bar']}
</span><span class='line'>y = x.copy()
</span><span class='line'>y['username'] = 'peter'
</span><span class='line'>y['machines'].remove('bar')
</span><span class='line'>
</span><span class='line'>y
</span><span class='line'>{'username': 'peter', 'machines': ['foo']}
</span><span class='line'>x
</span><span class='line'>{'username': 'admin', 'machines': ['foo']}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>deepcopy()
Avoid the situation that <em>modify</em> the value.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {}
</span><span class='line'>d['names'] = ['Alfred', 'Bertrand']
</span><span class='line'>
</span><span class='line'>c = d.copy()
</span><span class='line'>deepc = deepcopy(d)
</span><span class='line'>d['names'].append('Clive')
</span><span class='line'>
</span><span class='line'>d
</span><span class='line'>{'names': ['Alfred', 'Bertrand', 'Clive']}
</span><span class='line'>c
</span><span class='line'>{'names': ['Alfred', 'Bertrand', 'Clive']}
</span><span class='line'>deepc
</span><span class='line'>{'names': ['Alfred', 'Bertrand']}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>fromkeys
Create a new dictionary with the given keys.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{}.fromkeys(['name', 'age'])
</span><span class='line'>{'name': None, 'age': None}
</span><span class='line'>
</span><span class='line'>dict.fromkeys(['name', 'age'])
</span><span class='line'>{'name': None, 'age': None}
</span><span class='line'>
</span><span class='line'>dict.fromkeys(['name', 'age'], '(default)')
</span><span class='line'>{'name': '(default)', 'age': '(default)'}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>get()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {}
</span><span class='line'>d['name'] = 'Peter'
</span><span class='line'>d['addr'] = 'England'
</span><span class='line'>d.get('name')
</span><span class='line'>'Peter'
</span><span class='line'>d.get('addr')
</span><span class='line'>'England'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>has_key()
Check whether a dictionary has a given key.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Be gone after Python 3.0
</span><span class='line'>d = {}
</span><span class='line'>d.has_key('name')
</span><span class='line'>False
</span><span class='line'>d['name'] = 'Peter'
</span><span class='line'>d.has_key('name')
</span><span class='line'>True</span></code></pre></td></tr></table></div></figure>


<ul>
<li>items()
Return all the items of dictionary as a list of the form (key, value)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {'title': 'Python Web Site', 'url': 'http://www.python.org', 'spam': 0}
</span><span class='line'>d.items()
</span><span class='line'>[('url', 'http://www.python.org'), ('spam', 0), ('title', 'Python Web Site')]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>iteritems()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Return an iterator instead of a list
</span><span class='line'>it = d.iteritems()
</span><span class='line'>it
</span><span class='line'>`dictionary-itemiterator object at 0x10b918788`
</span><span class='line'>list(it)
</span><span class='line'>[('url', 'http://www.python.org'), ('spam', 0), ('title', 'Python Web Site')]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>pop()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {'spam': 0, 'url': 'http://www.python.org', 'title': 'Python Web Site'}
</span><span class='line'>
</span><span class='line'>d.pop('spam')
</span><span class='line'>0
</span><span class='line'>
</span><span class='line'>d
</span><span class='line'>{'url': 'http://www.python.org', 'title': 'Python Web Site'}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>popitem()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {'url': 'http://www.python.org', 'title': 'Python Web Site'}
</span><span class='line'>d.popitem()
</span><span class='line'>('url', 'http://www.python.org')
</span><span class='line'>d
</span><span class='line'>{'title': 'Python Web Site'}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>setdefault()
Set the value corresponding to the given key if it not already in the dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {}
</span><span class='line'>d.setdefault('name', 'N/A')
</span><span class='line'>'N/A'
</span><span class='line'>d
</span><span class='line'>{'name': 'N/A'}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>update()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {
</span><span class='line'>'name': 'Peter',
</span><span class='line'>'addr': 'England',
</span><span class='line'>}
</span><span class='line'>x = {'addr': 'France'}
</span><span class='line'>d.update(x)
</span><span class='line'>
</span><span class='line'>d
</span><span class='line'>{'name': 'Peter', 'addr': 'France'}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>values</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {}
</span><span class='line'>d[1] = 1
</span><span class='line'>d[2] = 2
</span><span class='line'>
</span><span class='line'>d.values()
</span><span class='line'>dict_values([1, 2])</span></code></pre></td></tr></table></div></figure>


<ul>
<li>range(a, b), <strong>[a, b)</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in range(10, 12):
</span><span class='line'>print(i)
</span><span class='line'>
</span><span class='line'>10
</span><span class='line'>11</span></code></pre></td></tr></table></div></figure>


<h3>Importing</h3>

<ul>
<li>import sth. from a module</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from somemodule import somefunction
</span><span class='line'>or
</span><span class='line'>from somemodule import *</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Define aliases</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from math import sqrt as foo
</span><span class='line'>foo(4)
</span><span class='line'>2.0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>loop the key of a dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {'x': 1, 'y': 2, 'z': 3}
</span><span class='line'>for key in d:
</span><span class='line'>print(key, d[key])
</span><span class='line'>
</span><span class='line'># this one is better
</span><span class='line'>for key, value in d.items():
</span><span class='line'>print(key, value)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Slightly Loopy</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[x*x for x in range(10) if x % 3 == 0]
</span><span class='line'>[0, 9, 36, 81]</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>res = []
</span><span class='line'>for x in range(3):
</span><span class='line'>for y in range(3):
</span><span class='line'>res.append((x, y))
</span><span class='line'>
</span><span class='line'># for short
</span><span class='line'>[(x, y) for x in range(2) for y in range(2)]
</span><span class='line'>[(0, 0), (0, 1), (1, 0), (1, 1)]</span></code></pre></td></tr></table></div></figure>


<h3>Executing and Evaluating</h3>

<ul>
<li>exec</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec "print 'hello, world!'"
</span><span class='line'>hello, world!</span></code></pre></td></tr></table></div></figure>


<ul>
<li>eval</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = {}
</span><span class='line'>d['x'] = 3  # exec 'x = 3' in d
</span><span class='line'>eval('x * x', d)
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus: Trick of Reduce Code</h3>

<ul>
<li>Comparison</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># using the former instead of the latter
</span><span class='line'>1 &lt; num &lt; 10
</span><span class='line'>1 &lt; num and num &lt; 10</span></code></pre></td></tr></table></div></figure>


<ul>
<li>or</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name = input('Enter name: ') or 'N/A'
</span><span class='line'>Enter name:
</span><span class='line'>
</span><span class='line'>name
</span><span class='line'>'N/A'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>a if b else c</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>score = int(99)
</span><span class='line'>grade = 'A' if 90 &lt;= score &lt;= 100 else 'B'
</span><span class='line'>
</span><span class='line'>grade
</span><span class='line'>'A'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes III]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/30/python-notes-iii/"/>
    <updated>2015-04-30T01:04:15+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/30/python-notes-iii</id>
    <content type="html"><![CDATA[<h3>Sort in two ways</h3>

<ul>
<li><strong>sort()</strong>: In-place sorting, <em>replaces</em> the original data</li>
<li><strong>sorted()</strong>: Copied sorting, return a <em>sorted copy</em> of the original data</li>
<li>sorting order</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sorted(data)    # Ascending
</span><span class='line'>sorted(data, reverse=True)  # Descending</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Get top 3 data from file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sanitize(time_string):
</span><span class='line'>    if '-' in time_string:
</span><span class='line'>        splitter = '-'
</span><span class='line'>    elif ':' in time_string:
</span><span class='line'>        splitter = ':'
</span><span class='line'>    else:
</span><span class='line'>        return (time_string)
</span><span class='line'>
</span><span class='line'>    (mins, secs) = time_string.split(splitter)
</span><span class='line'>    return (mins + '.' + secs)
</span><span class='line'>
</span><span class='line'>def get_data(filename):
</span><span class='line'>    try:
</span><span class='line'>        with open(filename) as file:
</span><span class='line'>            data = file.readline()
</span><span class='line'>        return data.strip().split(',')
</span><span class='line'>    except IOError as ioerr:
</span><span class='line'>        print('File error: ' + str(ioerr))
</span><span class='line'>        return(None)
</span><span class='line'>
</span><span class='line'># file operation
</span><span class='line'>james = get_data('james.txt')
</span><span class='line'>
</span><span class='line'>clean_james = []
</span><span class='line'>for each_t in james:
</span><span class='line'>    clean_james.append(sanitize(each_t))
</span><span class='line'>
</span><span class='line'>unique_james = []
</span><span class='line'>for each_t in clean_james:
</span><span class='line'>    if each_t not in unique_james:
</span><span class='line'>        unique_james.append(each_t)
</span><span class='line'>print(sorted(unique_james)[0:3])</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Remove the duplicates</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># file operation can be replaced with one line code
</span><span class='line'>
</span><span class='line'>print(sorted(set([sanitize(each_t) for each_t in get_date("james.txt")]))[0:3])</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bundle the code and data in a dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def get_data(filename):
</span><span class='line'>    try:
</span><span class='line'>        with open(filename) as file:
</span><span class='line'>            data = file.readline()
</span><span class='line'>        temp = data.strip().split(',')
</span><span class='line'>
</span><span class='line'>        # return a dictionary
</span><span class='line'>        return({'Name' : temp.pop(0),
</span><span class='line'>                'DOB'  : temp.pop(0),
</span><span class='line'>                'Times': str(sorted(set([sanitize(each_t) for each_t in temp]))[0:3])})
</span><span class='line'>        except IOError as ioerr:
</span><span class='line'>            print('File error: ' + str(ioerr))
</span><span class='line'>            return(None)
</span><span class='line'>
</span><span class='line'>sarah = get_data('sarah2.txt')
</span><span class='line'>print(sarah['Name'] + "'s fastest times are: " + sarah['Times'])</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Amend the code and data in a class that inherit from BIF <strong>list</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Athlete(list):
</span><span class='line'>    def __init__(self, a_name, a_dob=None, a_times=[]):
</span><span class='line'>        list.__init__([])
</span><span class='line'>        self.name = a_name
</span><span class='line'>        self.dob = a_dob
</span><span class='line'>        self.extend(a_times)
</span><span class='line'>
</span><span class='line'>def top3(self):
</span><span class='line'>    return(str(sorted(set([sanitize(each_t) for each_t in self]))[0:3]))
</span><span class='line'>
</span><span class='line'>def get_data(filename):
</span><span class='line'>    try:
</span><span class='line'>        ...
</span><span class='line'>        return(Athlete(temp.pop(0), temp.pop(0), temp))
</span><span class='line'>    except IOError as ioerr:
</span><span class='line'>        ...
</span><span class='line'>
</span><span class='line'>sarah = get_data('sarah2.txt')
</span><span class='line'>print(sarah.name + "'s fastest times are: " + sarah.top3())</span></code></pre></td></tr></table></div></figure>


<h3>Model the data</h3>

<ul>
<li>Put class AthleteList in a module file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pickle
</span><span class='line'># class AthleteList is saved in athletelist.py, import AthleteList using this line of code
</span><span class='line'># use dir() command to confirm that the import has been successful
</span><span class='line'>from athletelist import AthleteList
</span><span class='line'>
</span><span class='line'>def get_data(filename):
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>def put_to_store(file_list):
</span><span class='line'>    all_athletes = {}
</span><span class='line'>    for each_file in file_list:
</span><span class='line'>        ath = get_data(each_file)
</span><span class='line'>        all_athletes[ath.name] = ath
</span><span class='line'>    try:
</span><span class='line'>        with open('athletes.pickle', 'wb') as athf:
</span><span class='line'>            pickle.dump(all_athletes, athf)
</span><span class='line'>    except IOError as ioerr:
</span><span class='line'>        print('File error (put_and_store): ' + str(ioerr))
</span><span class='line'>        return (all_athletes)
</span><span class='line'>
</span><span class='line'>def get_from_store():
</span><span class='line'>    all_athletes = {}
</span><span class='line'>    try:
</span><span class='line'>        with open('athletes.pickle', 'rb') as athf:
</span><span class='line'>            all_athletes = pickle.load(athf)
</span><span class='line'>        except IOError as ioerr:
</span><span class='line'>            print('File error (get_from_store): ' + str(ioerr))
</span><span class='line'>            return (all_athletes)</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus I: Factory Function: set()</h3>

<ul>
<li>Build an unordered collection of unique elements</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = [1,1,13,3,3,2,2,3,1,13,1]
</span><span class='line'>set(data)
</span><span class='line'># output
</span><span class='line'>{1, 2, 3, 13}</span></code></pre></td></tr></table></div></figure>


<h3>Bonus II: BIF: pop(i)</h3>

<ul>
<li>pop(i) call returns and removes data from the front of a list at location</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = [1,13,3,3,1]
</span><span class='line'>data.pop(3)
</span><span class='line'># output
</span><span class='line'>3
</span><span class='line'>data
</span><span class='line'>[1,13,3,1]</span></code></pre></td></tr></table></div></figure>


<h3>Bonus III: List Comprehension</h3>

<ul>
<li>When the code is like this</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new = []
</span><span class='line'>for each_item in old:
</span><span class='line'>    ...
</span><span class='line'>append(len(each_item))</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Rewrite it like this</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new = [len(each_item) for each_item in old]</span></code></pre></td></tr></table></div></figure>


<h3>Bonus IV: Dictionary</h3>

<ul>
<li>Two way to create an empty dictionary</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># method 1
</span><span class='line'>d1 = {}
</span><span class='line'># method 2
</span><span class='line'>d2 = dict()</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wither and Fall]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/29/wither-and-fall/"/>
    <updated>2015-04-29T01:13:50+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/29/wither-and-fall</id>
    <content type="html"><![CDATA[<p>It should be a splendid flowering season</p>

<p>But grass wither and the flowers fall</p>

<p>It was painful</p>

<p>No flowers nor fruits</p>

<p>Reluctant withered at this time</p>

<p>But falled just this time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes II]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/28/python-notes-ii/"/>
    <updated>2015-04-28T22:29:26+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/28/python-notes-ii</id>
    <content type="html"><![CDATA[<h3>Operation for text</h3>

<ul>
<li>Open and close a file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>the_file = open('sketch.txt')
</span><span class='line'>the_file.close()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Get and change the current working directory</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import os
</span><span class='line'>os.getcwd()
</span><span class='line'>os.chdir('.../targetDirectory')
</span><span class='line'>os.listdir()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Read line and back to the start location of the file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data = open('sketch.txt')
</span><span class='line'>print(data.readline(), end='')
</span><span class='line'>data.seek(0)    // “rewind” a file to the beginning</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Process every line of a file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for eachLine in data:
</span><span class='line'>    print(eachLine, end='')</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using <em>split()</em> method to process each line to <em>extract</em> part of the line</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import os
</span><span class='line'>
</span><span class='line'>if os.path.exists('sketch.txt'):
</span><span class='line'>    data = open('sketch.txt')
</span><span class='line'>
</span><span class='line'>for eachLine in data:
</span><span class='line'>    # only process the line that contains ':'
</span><span class='line'>    if not eachLine.find(':') == -1:
</span><span class='line'>        # optional arg is set to 1, line of data is only broken into 2 pieces
</span><span class='line'>        (role, line_spoken) = eachLine.split(':', 1)
</span><span class='line'>        line_spoken = line_spoken.strip()
</span><span class='line'>
</span><span class='line'>        print(role, end='')
</span><span class='line'>        print(' said: ', end='')
</span><span class='line'>        print(line_spoken, end='')
</span><span class='line'>
</span><span class='line'>    data.close()
</span><span class='line'>else:
</span><span class='line'>    print('The data file is missing!')</span></code></pre></td></tr></table></div></figure>


<h3>Handle Exceptions: try/except Machanism</h3>

<ul>
<li>Python try to run code first, then deal with runtime errors (exceptions) as they happen</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>    code (which might cause a runtime error)
</span><span class='line'>except ErrorType:
</span><span class='line'>    error-recovery code</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python catch exceptions as they occur, gives you a chance to possibly recover from the error and, critically, not crash</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>    data = open('sketch.txt')
</span><span class='line'>
</span><span class='line'>    for eachLine in data:
</span><span class='line'>    try:
</span><span class='line'>        (role, spoken) = eachLine.split(':', 1)
</span><span class='line'>        line_spoken = line_spoken.strip()
</span><span class='line'>
</span><span class='line'>        print(role, end='')
</span><span class='line'>        print(' said: ', end='')
</span><span class='line'>        print(spoken, end='')
</span><span class='line'>
</span><span class='line'>    # for handling the case there is no ':' in a line
</span><span class='line'>    except ValueError:
</span><span class='line'>        pass
</span><span class='line'>
</span><span class='line'>    data.close()
</span><span class='line'>except IOError:
</span><span class='line'>    print('The data file is missing!')
</span></code></pre></td></tr></table></div></figure>


<h3>Extend try/except with finally</h3>

<ul>
<li>No matter what errors occur, code in the <strong>finally</strong> suite is always run</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man = []
</span><span class='line'>other = []
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    data = open('sketch.txt')
</span><span class='line'>
</span><span class='line'>    for eachLine in data:
</span><span class='line'>    try:
</span><span class='line'>        (role, spoken) = eachLine.split(':', 1)
</span><span class='line'>        spoken = spoken.strip()
</span><span class='line'>
</span><span class='line'>        if role == 'Man':
</span><span class='line'>            man.append(spoken)
</span><span class='line'>        elif role == 'Other Man':
</span><span class='line'>            other.append(spoken)
</span><span class='line'>        except ValueError:
</span><span class='line'>            pass
</span><span class='line'>
</span><span class='line'>    data.close()
</span><span class='line'>except IOError:
</span><span class='line'>    print('The data file is missing!')
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    man_file = open('man_data.txt', 'w')
</span><span class='line'>    other_file = open('other_data.txt', 'w')
</span><span class='line'>    print(man, file=man_file)
</span><span class='line'>    print(other, file=other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File Error: ' + str(err))
</span><span class='line'>finally:
</span><span class='line'>    if 'man_file' in locals():
</span><span class='line'>        man_file.close()
</span><span class='line'>    if 'other_file' in locals():
</span><span class='line'>        other_file.close()</span></code></pre></td></tr></table></div></figure>


<h3>Knowing the detailed error imformation</h3>

<ul>
<li>Python creates an exception object that is passed as an argument to the except suite</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>    data = open('missingFile.txt')
</span><span class='line'>        print(data.readline(), file=data)
</span><span class='line'># the error imformation is named as 'err'
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File error: ' + str(err))
</span><span class='line'>finally:
</span><span class='line'>    if 'data' in locals():
</span><span class='line'>        data.close()
</span><span class='line'>
</span><span class='line'># output:
</span><span class='line'>File error: [Errno 2] No such file or directory: 'missingFile.txt'</span></code></pre></td></tr></table></div></figure>


<h3>Use with to reduce the amount of code</h3>

<ul>
<li>The following code is identical to the former as a short version</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>    with open('missingFile.txt', "w") as data:
</span><span class='line'>        print(data.readline(), file=data)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File error: ' + str(err))</span></code></pre></td></tr></table></div></figure>


<ul>
<li>try/except/finally code can be rewrite using <strong>with</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try:
</span><span class='line'>    with open('man_data.txt', 'w') as man_file, open('other_data.txt', 'w') as other_file:
</span><span class='line'>        print(man, file=man_file)
</span><span class='line'>        print(other, file=other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File error: ' + str(err))</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Note</strong>: no need to close file, because <strong>with</strong> does that job</li>
</ul>


<h3>Open the file in write mode</h3>

<ul>
<li>Assume there is a file named &ldquo;example.txt&rdquo; in the current directory</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>out = open("example.txt", "w")
</span><span class='line'>print("Write something to example.txt", file=out)
</span><span class='line'>out.close()</span></code></pre></td></tr></table></div></figure>


<h3>Update nester.py for formating the output files</h3>

<ul>
<li>Add the 4th argument (<strong>fh=sys.out</strong>) be the output file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nester.py
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>def print_item (the_list, indent=False, level=0, fh=sys.stdout):
</span><span class='line'>    for each_item in the_list:
</span><span class='line'>        if isinstance(each_item, list):
</span><span class='line'>            print_item (each_item, indent, level+1, fh)
</span><span class='line'>        else:
</span><span class='line'>            if indent:
</span><span class='line'>                for tab_stop in range(level):
</span><span class='line'>                    print("\t", end='@!', file=fh)
</span><span class='line'>            print (each_item, file=fh)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using func <strong>print_item</strong> for formating the output file</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import nester
</span><span class='line'>
</span><span class='line'>man = []
</span><span class='line'>other = []
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    data = open('sketch.txt')
</span><span class='line'>
</span><span class='line'>for eachLine in data:
</span><span class='line'>    try:
</span><span class='line'>        (role, line_spoken) = eachLine.split(':', 1)
</span><span class='line'>        line_spoken = line_spoken.strip()
</span><span class='line'>
</span><span class='line'>        if role == 'Man':
</span><span class='line'>            man.append(line_spoken)
</span><span class='line'>        elif role == 'Other Man':
</span><span class='line'>            other.append(line_spoken)
</span><span class='line'>    except ValueError:
</span><span class='line'>        pass
</span><span class='line'>    data.close()
</span><span class='line'>except IOError:
</span><span class='line'>    print('The data file is missing!')
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    with open('man_data.txt', 'w') as man_file, open('other_data.txt', 'w') as other_file:
</span><span class='line'>    # format the output files
</span><span class='line'>    nester.print_item(man, fh=man_file)
</span><span class='line'>    nester.print_item(other, fh=other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File error: ' + str(err))</span></code></pre></td></tr></table></div></figure>


<h3>Pickle the data</h3>

<ul>
<li>Store data using pickle.dump()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pickle
</span><span class='line'>
</span><span class='line'>man = []
</span><span class='line'>other = []
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    ...
</span><span class='line'>except IOError:
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    # 'wb' indicate the access mode to be "writeable, binary"
</span><span class='line'>    with open('man_data.txt', 'wb') as man_file, open('other_data.txt', 'wb') as other_file:
</span><span class='line'>    # store data
</span><span class='line'>        pickle.dump(man, man_file)
</span><span class='line'>        pickle.dump(other, other_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File error: ' + str(err))
</span><span class='line'># handle pickle exceptions
</span><span class='line'>except pickle.PickleError as perr:
</span><span class='line'>    print('Pickling error: ' + str(perr))</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Load data using pickle.load()</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import pickle
</span><span class='line'>import nester
</span><span class='line'>
</span><span class='line'>new_man = []
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    with open('man_data.txt', 'rb') as man_file:
</span><span class='line'>        new_man = pickle.load(man_file)
</span><span class='line'>except IOError as err:
</span><span class='line'>    print('File error: ' + str(err))
</span><span class='line'>except pickle.PickleError as perr:
</span><span class='line'>    print('Pickle error: ' + str(perr))
</span><span class='line'>
</span><span class='line'>nester.print_item(new_man)</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus I: BIF split()</h3>

<ul>
<li>split(&hellip;)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.split([sep[, maxsplit]]) -&gt; list of strings</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Return a list of the words in str, using <em>sep</em> as the delimiter string</li>
<li>If maxsplit is given, at most maxsplit splits are done</li>
<li>If <em>sep</em> is not specified or is None, any <strong>whitespace</strong> string is a separator and empty strings are removed from the results</li>
<li>If the <strong>optional argument</strong> is set to 1, line of data is only broken into 2 pieces, effectively negating the effect of any extra colon on any line</li>
</ul>


<h3>Bonus II: BIF strip()</h3>

<ul>
<li>strip(&hellip;)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str = "!!!!Today is a good day...Yeah.!!!!!!"
</span><span class='line'>str.strip('!')
</span><span class='line'>'Today is a good day...Yeah.'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Returns a copy in which all chars have been stripped at the beginning and the end</li>
</ul>


<h3>Bonus III: BIFs Recall</h3>

<ul>
<li>open()</li>
<li>close()</li>
<li>readline()</li>
<li>seek()</li>
<li>split()</li>
<li>strip()</li>
<li>find()</li>
<li>help()</li>
<li>not</li>
<li>pass</li>
<li>pickle.dump()</li>
<li>pickle.load()</li>
<li>sys.out</li>
<li>try/except/finally</li>
<li>with &hellip; as</li>
<li>ValueError: Occurs when data doesn&rsquo;t conform to an expected format</li>
<li>IOError: Occurs when data can&rsquo;t be accessed properly</li>
</ul>


<h3>Bonus IV: Python Variable</h3>

<ul>
<li>Python variables don&rsquo;t actually contain the data assigned to them</li>
<li>Python variables contain a reference to a data object</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Notes I]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/27/python-notes-i/"/>
    <updated>2015-04-27T12:28:38+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/27/python-notes-i</id>
    <content type="html"><![CDATA[<h3>Work effectively with IDLE</h3>

<ul>
<li>Press <strong>TAB</strong> key, IDLE will offer suggestions to help you complete your statement</li>
<li>Press <strong>Alt-P</strong> to recall the previous code statement and press <strong>Alt-N</strong> to move to the next code statement</li>
</ul>


<h3>Deal with Python list</h3>

<ul>
<li>Python&rsquo;s variable identifiers don&rsquo;t have a type, Python&rsquo;s list is a <strong>high-level collection</strong></li>
<li>Using print() and len() to work out how many data items are in the list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal  = ["Dog", 'Pig', 'Cat', "Duck"]
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck']
</span><span class='line'>print(len(animal))
</span><span class='line'>4
</span><span class='line'>print(animal[1])
</span><span class='line'>Pig</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using append(), extend() and pop() method to add and remove data from the list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal.append("Tiger")
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck', 'Tiger']
</span><span class='line'>animal.pop()
</span><span class='line'>'Tiger'
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck']
</span><span class='line'>animal.extend(["Fish", "Bird"])
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Pig', 'Cat', 'Duck', 'Fish', 'Bird']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using remove() and insert() to find and remove or add a <strong>specific</strong> data from list</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal.remove("Pig")
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Cat', 'Duck', 'Fish', 'Bird']
</span><span class='line'>animal.insert(1, "Bull")
</span><span class='line'>print(animal)
</span><span class='line'>['Dog', 'Bull', 'Cat', 'Duck', 'Fish', 'Bird']</span></code></pre></td></tr></table></div></figure>


<ul>
<li>For loops work with lists of any size</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animals = ["Dog", 'Pig', 'Cat', "Duck", "Fish"]
</span><span class='line'>for each_animal in animals:
</span><span class='line'>    print each_animal</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Store list within lists</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>movie = ["Titanic", 1997, "Romance & Disaster", "194 minutes", ["James Cameron", ["Leonardo DiCaprio", "Kate Winslet", "Billy Zane", "Kathy Bates", "Frances Fisher"]]]
</span><span class='line'>for each_item in movie:
</span><span class='line'>    print each_item
</span><span class='line'>
</span><span class='line'>Titanic
</span><span class='line'>1997
</span><span class='line'>Romance & Disaster
</span><span class='line'>194 minutes
</span><span class='line'>['James Cameron', ['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates', 'Frances Fisher']]
</span><span class='line'>
</span><span class='line'>print movie[4][1][0]
</span><span class='line'>Leonardo DiCaprio</span></code></pre></td></tr></table></div></figure>


<h3>Don&rsquo;t repeat code and create a function</h3>

<ul>
<li>isinstance() BIF checks whether an identifier refers to a data object of some specified type</li>
<li>Using <strong>def</strong> to define a custom function</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def function_name (arguments):
</span><span class='line'>    code suite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python3 defaults its recursion limit to 1,000</li>
<li>Print items in list within lists</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_item(the_list):
</span><span class='line'>    for each_item in the_list:
</span><span class='line'>        if isinstance(each_item, list): 
</span><span class='line'>            print_item(each_item)
</span><span class='line'>        else:
</span><span class='line'>            print(each_item)
</span><span class='line'>
</span><span class='line'>print_item(movie)
</span><span class='line'>
</span><span class='line'>Titanic
</span><span class='line'>1997
</span><span class='line'>Romance & Disaster
</span><span class='line'>194 minutes
</span><span class='line'>James Cameron
</span><span class='line'>Leonardo DiCaprio
</span><span class='line'>Kate Winslet
</span><span class='line'>Billy Zane
</span><span class='line'>Kathy Bates
</span><span class='line'>Frances Fisher</span></code></pre></td></tr></table></div></figure>


<h3>Build a distribution and upload code to PyPI</h3>

<ul>
<li>Create a folder for the module</li>
<li>Create a file called &ldquo;setup.py&rdquo; in the new folder</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from distutils.core import setup
</span><span class='line'>
</span><span class='line'>setup(
</span><span class='line'>    name = 'nester',
</span><span class='line'>    version = '1.0',
</span><span class='line'>    py_modules = ['nester'],
</span><span class='line'>    author = 'name',
</span><span class='line'>    author_email = 'name@somewhere.com',
</span><span class='line'>    url = 'name@someplace.com',
</span><span class='line'>    description = 'A simple printer of nested lists',
</span><span class='line'>    )</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Build a distribution file, enter the command at the prompt</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python3 setup.py sdist</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the distribution into local copy of Python</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python3 setup.py install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Then, the module has been <em>transformed</em> into a distribution and <em>installed</em> into local copy of Python</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// at the first time, should type the username and password
</span><span class='line'>python3 setup.py register</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Finally, upload code to PyPI</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python3 setup.py sdist upload</span></code></pre></td></tr></table></div></figure>


<h3>Import a module to use it</h3>

<ul>
<li>For instance, there is a function named &ldquo;nester.py&rdquo;</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_item (the_list):
</span><span class='line'>    # This function takes a argument called "the_list"
</span><span class='line'>    for each_item in the_list:
</span><span class='line'>        if isinstance(each_item, list):
</span><span class='line'>            print_item (each_item)
</span><span class='line'>        else:
</span><span class='line'>            print (each_item)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Type <strong>F5</strong> to run the module&rsquo;s code, use the following list data</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// allow us to access nester's functions
</span><span class='line'>import nester
</span><span class='line'>animals = ['Pig', 'Dog', 'Cat', 'Bird', 'Fish']
</span><span class='line'>// "nester" is associated namespace which like family names helps to qualify what the code mean
</span><span class='line'>nester.print_item(animals)</span></code></pre></td></tr></table></div></figure>


<h3>Use optional arguments</h3>

<ul>
<li>Update the function &ldquo;nester.py&rdquo; with default arguments</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_item (the_list, indent=False, level=0):
</span><span class='line'>    for each_item in the_list:
</span><span class='line'>        if isinstance(each_item, list):
</span><span class='line'>            print_item (each_item, indent, level+1)
</span><span class='line'>        else:
</span><span class='line'>            if indent:
</span><span class='line'>                for tab_stop in range(level):
</span><span class='line'>                    print("\t", end='@!')
</span><span class='line'>            print (each_item)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use <strong>indent</strong> to control whether indent code</li>
<li>Use <strong>level</strong> to control the init indentation level</li>
</ul>


<h3>Update reversion to PyPI</h3>

<ul>
<li>Edit &ldquo;setup.py&rdquo; so that it has a new version</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version = '1.1',</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Upload the new distribution to PyPI</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python3 setup.py sdisk upload</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Bonus I: Python BIFs</h3>

<ul>
<li>BIFs is short for <em>build-in functions</em>, it can mean less code to write</li>
<li>There were over 70 BIFs in Python3</li>
<li>BIFs have their very own namespace called <strong><em> builtins </em></strong></li>
<li>At Python or IDLE shell, typing dir(<strong><em> builtins </em></strong>) to see a list of the built-in functions</li>
<li>To find out what any BIF does—like input(), for example—type help(input) at the shell for a description of the BIFs function</li>
<li>Before write new code, think BIF at first</li>
</ul>


<h3>Bonus II: .pyc Files</h3>

<ul>
<li>If the module code hasn&rsquo;t changed, no translation occurs and the &ldquo;compiled&rdquo; code is executed</li>
<li>If the code has changed, the translation occurs (creating a new .pyc file) as needed</li>
<li>When Python sees a .pyc file, it tries to use it because doing so makes everything go much faster</li>
<li>The use of .pyc file (if found) is primarily a <strong>potential runtime optimization</strong> performed by the interpreter, it can&rsquo;t be created by users</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Property Attributes in iOS]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios/"/>
    <updated>2015-04-26T11:19:43+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/26/variable-property-attributes-in-ios</id>
    <content type="html"><![CDATA[<p>In iOS, variable property attributes indicate data accessibility and storage considerations,</p>

<ul>
<li>atomic                //default</li>
<li>nonatomic</li>
<li>strong = retain       //default</li>
<li>weak = unsafe_unretained</li>
<li>retain</li>
<li>assign                //default</li>
<li>unsafe_unretained</li>
<li>copy</li>
<li>readonly</li>
<li>readwrite             //default</li>
</ul>


<hr />

<ul>
<li>atomic (default)

<ul>
<li>Only one thread access the variable (static type)</li>
<li>Thread safe, but slow</li>
</ul>
</li>
</ul>


<p>Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (atomic, retain) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>nonatomic

<ul>
<li>Multiple threads access the variable (dynamic type)</li>
<li>Thread unsafe, but fast</li>
<li>Not a default behavior, need to add nonatomic keyword</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, retain) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>strong (iOS4 = retain, default)

<ul>
<li>Own the object strongly, keep it in the heap until don&rsquo;t point to it anymore</li>
<li>Can&rsquo;t dealloc this before aim fine with that same as &ldquo;retain&rdquo;</li>
<li>Generally, using for UIViewControllers (UI item&rsquo;s parents)</li>
<li>Used with ARC and ARC automatically releases it when beyond its area or the strong reference is invalid</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, strong) ViewController *viewController;
</span><span class='line'>@synthesize viewController;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>weak (In iOS 4 &amp; OS X Snow Leopand = unsafe_unretained )

<ul>
<li>Keep it as long as someone else points to it strongly</li>
<li>A &ldquo;weak&rdquo; reference is a reference that you don&rsquo;t retain</li>
<li>Can&rsquo;t own the instance of object</li>
<li>When the object is &ldquo;deallocated&rdquo;, the weak pointer is automatically set to nil</li>
<li>Generally using for IBOutlets (UIViewController&rsquo;s Childs) because the child object only needs to exist as long as the parent object does</li>
</ul>
</li>
</ul>


<p>Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, weak) IBOutlet UIButton *myButton;
</span><span class='line'>@synthesize myButton;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>retain = strong

<ul>
<li>Old value is released and it is assigned</li>
<li>Specifies the new value should be sent &ldquo;-retain&rdquo; on assignment and the old value sent &ldquo;-release&rdquo;</li>
<li>If you write retain it will auto work like strong</li>
<li>Methods like &ldquo;alloc&rdquo; include an implicit &ldquo;retain&rdquo;</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, retain) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>assign (default)

<ul>
<li>A property attribute tells the compiler how to synthesize the property&rsquo;s setter implementation</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, assign) NSString *address;
</span><span class='line'>@synthesize address;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>unsafe_unretained (In iOS 4 &amp; OS X Snow Leopand)

<ul>
<li>An ownership qualifier that tells ARC how to insert retain/release calls</li>
<li>The ARC version of assign</li>
<li>The old version of weak but not safe</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, unsafe_unretained) NSString *nickName;
</span><span class='line'>@synthesize nickName;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>copy

<ul>
<li>Required when the object is mutable</li>
<li>Specifies the new value should be sent &ldquo;-copy&rdquo; on assignment and the old value should be sent &ldquo;-release&rdquo;</li>
<li>Like retain, returns an object which you must explicitly release (e.g., in dealloc) in non-garbage collected environments</li>
<li>Need to release the object when finished with it because you are retaining the copy</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, copy) NSArray *myArray;
</span><span class='line'>@synthesize myArray;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>readonly

<ul>
<li>Tell compiler not to generate &ldquo;setter&rdquo; method automatically</li>
<li>If you specify readonly, only a &ldquo;getter&rdquo; method is required in the @implementation block</li>
<li>If you use the @synthesize directive in the @implementation block, only the &ldquo;getter&rdquo; method is synthesized</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, readonly) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>readwrite  (default)

<ul>
<li>&ldquo;setter&rdquo; and &ldquo;getter&rdquo; are both generated</li>
<li>Both &ldquo;setter&rdquo; and &ldquo;getter&rdquo; method are required in the @implementation block</li>
<li>If you use the @synthesize directive in the implementation block, both the &ldquo;setter&rdquo; and &ldquo;getter&rdquo; methods are synthesized</li>
</ul>
</li>
</ul>


<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, readwrite) NSString *name;
</span><span class='line'>@synthesize name;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference Count Style Memory Management of Apple]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-of-apple/"/>
    <updated>2015-04-25T23:32:02+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/25/reference-count-style-memory-management-of-apple</id>
    <content type="html"><![CDATA[<ul>
<li>A variable hold the objects generate by itself</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A variable can hold the objects generate by other variables</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">retain</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If the objects of a variable are no longer needed, the variable can release the objects held by itself</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Generate by itself and hold the objects by itself</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Generate by others and hold the objects by itself</span>
</span><span class='line'><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="k">release</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A variable cannot release the objects held by others</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">obj1</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj0</span> <span class="n">object</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj1</span> <span class="k">release</span><span class="p">];</span>    <span class="c1">// error</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add Stuff on GitHub via Command Line]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/24/how-to-add-stuff-on-github-via-command-line/"/>
    <updated>2015-04-24T00:31:36+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/24/how-to-add-stuff-on-github-via-command-line</id>
    <content type="html"><![CDATA[<ul>
<li>Register an &ldquo;username&rdquo; and login in GitHub</li>
<li>Click &ldquo;+&rdquo; sign at the upper right corner to create a new repository and give it a name</li>
<li>Open your repository and you can see the clone URL is located at the right side, for instance: <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>Copy the URL of your repository and clone it from remote to local by typing: git clone <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>See the current configured remote repository for your fork by typing: git remote -v</li>
<li>Add something to the local repository, such as a &ldquo;README.md&rdquo; file</li>
<li>Push the new added file &ldquo;README.md&rdquo; to the remote version on GitHub by typing:

<ul>
<li>git init</li>
<li>git add README.md</li>
<li>git commit -m &ldquo;your commit remark&rdquo;</li>
<li>git remote rm origin</li>
<li>git remote add origin <a href="https://github.com/yourname/yourRepositoryName.git">https://github.com/yourname/yourRepositoryName.git</a></li>
<li>git push -u origin master</li>
</ul>
</li>
<li>Typing your username and password to submit the changes to your repository on GitHub</li>
<li>Now you can refresh the web page of your repository to see the &ldquo;README.md&rdquo; file that just added</li>
<li>For removing the file/document named &ldquo;sometingToRemove&rdquo; of your local repository:

<ul>
<li>git rm sometingToRemove</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://reckhhh.github.io/blog/2015/04/23/first-blog/"/>
    <updated>2015-04-23T23:38:25+08:00</updated>
    <id>http://reckhhh.github.io/blog/2015/04/23/first-blog</id>
    <content type="html"><![CDATA[<p>After several hours efforts, I have my Octopress blog in the end.</p>

<h4><em>Hello, World !</em></h4>

<p>Then, what to write ?</p>

<p>I intend to:</p>

<ul>
<li><p>Share technology about <em>Programming</em> and <em>Software Development</em></p></li>
<li><p>Share <em>Experiences</em>, <em>Lessons</em> and <em>Thoughts</em></p></li>
<li><p>Record <em>Life</em> and <em>Time</em></p></li>
<li><p>Write about <em>Other Interesting Stuff</em></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
